/* tslint:disable */
/* eslint-disable */
/**
 * Shopper API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountsUsersList200Response
 */
export interface AccountsUsersList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsUsersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsUsersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsUsersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof AccountsUsersList200Response
     */
    'results': Array<User>;
}
/**
 * 
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * 
     * @type {number}
     * @memberof Cart
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Cart
     */
    'customer': number;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof Cart
     */
    'items'?: Array<CartItem>;
    /**
     * 
     * @type {string}
     * @memberof Cart
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface CartItem
 */
export interface CartItem {
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    'cart': number;
    /**
     * 
     * @type {ProductVariant}
     * @memberof CartItem
     */
    'product_variant'?: ProductVariant;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    'size': string;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface CartItemCreate
 */
export interface CartItemCreate {
    /**
     * 
     * @type {number}
     * @memberof CartItemCreate
     */
    'product_variant': number;
    /**
     * 
     * @type {string}
     * @memberof CartItemCreate
     */
    'size': string;
    /**
     * 
     * @type {number}
     * @memberof CartItemCreate
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface CartItemUpdate
 */
export interface CartItemUpdate {
    /**
     * 
     * @type {number}
     * @memberof CartItemUpdate
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'image'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'parent'?: number | null;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Category
     */
    'children': Array<Category>;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'user': number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'date_of_birth'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Customer
     */
    'preferences': Array<CustomerPreferencesEnum>;
}

export const CustomerPreferencesEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Baby: 'BABY'
} as const;

export type CustomerPreferencesEnum = typeof CustomerPreferencesEnum[keyof typeof CustomerPreferencesEnum];

/**
 * 
 * @export
 * @interface CustomerCreate
 */
export interface CustomerCreate {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreate
     */
    'date_of_birth'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerCreate
     */
    'preferences': Array<CustomerCreatePreferencesEnum>;
}

export const CustomerCreatePreferencesEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Baby: 'BABY'
} as const;

export type CustomerCreatePreferencesEnum = typeof CustomerCreatePreferencesEnum[keyof typeof CustomerCreatePreferencesEnum];

/**
 * 
 * @export
 * @interface CustomersCustomersList200Response
 */
export interface CustomersCustomersList200Response {
    /**
     * 
     * @type {number}
     * @memberof CustomersCustomersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CustomersCustomersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomersCustomersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Customer>}
     * @memberof CustomersCustomersList200Response
     */
    'results': Array<Customer>;
}
/**
 * 
 * @export
 * @interface ElasticProductsList200Response
 */
export interface ElasticProductsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ElasticProductsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ElasticProductsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ElasticProductsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductDocument>}
     * @memberof ElasticProductsList200Response
     */
    'results': Array<ProductDocument>;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'order_id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'customer'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'payment_type'?: OrderPaymentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'total'?: string;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    'items': Array<OrderItem>;
}

export const OrderPaymentTypeEnum = {
    Card: 'CARD'
} as const;

export type OrderPaymentTypeEnum = typeof OrderPaymentTypeEnum[keyof typeof OrderPaymentTypeEnum];

/**
 * 
 * @export
 * @interface OrderCreate
 */
export interface OrderCreate {
    /**
     * 
     * @type {string}
     * @memberof OrderCreate
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreate
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreate
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreate
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreate
     */
    'payment_type'?: OrderCreatePaymentTypeEnum;
}

export const OrderCreatePaymentTypeEnum = {
    Card: 'CARD'
} as const;

export type OrderCreatePaymentTypeEnum = typeof OrderCreatePaymentTypeEnum[keyof typeof OrderCreatePaymentTypeEnum];

/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'product_variant': number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'price': string;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface OrdersCustomerCartItemsList200Response
 */
export interface OrdersCustomerCartItemsList200Response {
    /**
     * 
     * @type {number}
     * @memberof OrdersCustomerCartItemsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof OrdersCustomerCartItemsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrdersCustomerCartItemsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof OrdersCustomerCartItemsList200Response
     */
    'results': Array<CartItem>;
}
/**
 * 
 * @export
 * @interface OrdersCustomerCartsList200Response
 */
export interface OrdersCustomerCartsList200Response {
    /**
     * 
     * @type {number}
     * @memberof OrdersCustomerCartsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof OrdersCustomerCartsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrdersCustomerCartsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Cart>}
     * @memberof OrdersCustomerCartsList200Response
     */
    'results': Array<Cart>;
}
/**
 * 
 * @export
 * @interface OrdersCustomerOrdersList200Response
 */
export interface OrdersCustomerOrdersList200Response {
    /**
     * 
     * @type {number}
     * @memberof OrdersCustomerOrdersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof OrdersCustomerOrdersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrdersCustomerOrdersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Order>}
     * @memberof OrdersCustomerOrdersList200Response
     */
    'results': Array<Order>;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'sku'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'recommendation': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'gender': ProductGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'for_kids': boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'price_from': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'discount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'discounted_price'?: string;
    /**
     * 
     * @type {Category}
     * @memberof Product
     */
    'category'?: Category;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'country'?: string | null;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Product
     */
    'tags'?: Array<Tag>;
    /**
     * 
     * @type {Array<ProductSpecification>}
     * @memberof Product
     */
    'specifications': Array<ProductSpecification>;
    /**
     * 
     * @type {Shop}
     * @memberof Product
     */
    'shop'?: Shop;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'publish_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'status'?: ProductStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Product
     */
    'variants'?: Array<ProductVariant>;
    /**
     * 
     * @type {Array<ProductReview>}
     * @memberof Product
     */
    'reviews'?: Array<ProductReview>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'rating'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'quantity'?: string;
}

export const ProductGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Unisex: 'UNISEX'
} as const;

export type ProductGenderEnum = typeof ProductGenderEnum[keyof typeof ProductGenderEnum];
export const ProductStatusEnum = {
    Draft: 'DRAFT',
    Scheduled: 'SCHEDULED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    Archive: 'ARCHIVE'
} as const;

export type ProductStatusEnum = typeof ProductStatusEnum[keyof typeof ProductStatusEnum];

/**
 * 
 * @export
 * @interface ProductCreate
 */
export interface ProductCreate {
    /**
     * 
     * @type {number}
     * @memberof ProductCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'sku'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'recommendation': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'gender': ProductCreateGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreate
     */
    'for_kids': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'price_from': string;
    /**
     * 
     * @type {number}
     * @memberof ProductCreate
     */
    'discount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductCreate
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'country'?: string | null;
    /**
     * 
     * @type {Set<number>}
     * @memberof ProductCreate
     */
    'tags'?: Set<number>;
    /**
     * 
     * @type {object}
     * @memberof ProductCreate
     */
    'specifications': object;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'publish_date'?: string | null;
}

export const ProductCreateGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Unisex: 'UNISEX'
} as const;

export type ProductCreateGenderEnum = typeof ProductCreateGenderEnum[keyof typeof ProductCreateGenderEnum];

/**
 * 
 * @export
 * @interface ProductDocument
 */
export interface ProductDocument {
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'sku': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'gender': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductDocument
     */
    'for_kids': boolean;
    /**
     * 
     * @type {number}
     * @memberof ProductDocument
     */
    'price_from': number;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'tags': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'specifications': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'shop': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'variants': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDocument
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ProductFavourite
 */
export interface ProductFavourite {
    /**
     * 
     * @type {number}
     * @memberof ProductFavourite
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductFavourite
     */
    'product': number;
}
/**
 * 
 * @export
 * @interface ProductReview
 */
export interface ProductReview {
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'product': number;
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'star': number;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'review': string;
    /**
     * 
     * @type {Customer}
     * @memberof ProductReview
     */
    'customer'?: Customer;
}
/**
 * 
 * @export
 * @interface ProductReviewCreate
 */
export interface ProductReviewCreate {
    /**
     * 
     * @type {number}
     * @memberof ProductReviewCreate
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewCreate
     */
    'product': number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewCreate
     */
    'star': number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewCreate
     */
    'review': string;
}
/**
 * 
 * @export
 * @interface ProductSpecification
 */
export interface ProductSpecification {
    /**
     * 
     * @type {string}
     * @memberof ProductSpecification
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSpecification
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ProductUpdate
 */
export interface ProductUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductUpdate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdate
     */
    'recommendation': string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdate
     */
    'gender': ProductUpdateGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ProductUpdate
     */
    'for_kids': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdate
     */
    'price_from': string;
    /**
     * 
     * @type {number}
     * @memberof ProductUpdate
     */
    'discount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductUpdate
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdate
     */
    'country'?: string | null;
    /**
     * 
     * @type {Set<number>}
     * @memberof ProductUpdate
     */
    'tags'?: Set<number>;
    /**
     * 
     * @type {object}
     * @memberof ProductUpdate
     */
    'specifications': object;
}

export const ProductUpdateGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Unisex: 'UNISEX'
} as const;

export type ProductUpdateGenderEnum = typeof ProductUpdateGenderEnum[keyof typeof ProductUpdateGenderEnum];

/**
 * 
 * @export
 * @interface ProductVariant
 */
export interface ProductVariant {
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'slug'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'product': number;
    /**
     * Color title
     * @type {string}
     * @memberof ProductVariant
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'description': string;
    /**
     * 
     * @type {Array<SizeVariant>}
     * @memberof ProductVariant
     */
    'size_variants': Array<SizeVariant>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'price_min'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'price_max'?: string;
    /**
     * 
     * @type {Array<ProductVariantImage>}
     * @memberof ProductVariant
     */
    'images'?: Array<ProductVariantImage>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'image_main'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantCreate
 */
export interface ProductVariantCreate {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantCreate
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantCreate
     */
    'product': number;
    /**
     * Color title
     * @type {string}
     * @memberof ProductVariantCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantCreate
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof ProductVariantCreate
     */
    'size_variants': object;
}
/**
 * 
 * @export
 * @interface ProductVariantImage
 */
export interface ProductVariantImage {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantImage
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantImage
     */
    'variant': number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantImage
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductVariantImage
     */
    'is_main'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductVariantImageUpdate
 */
export interface ProductVariantImageUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductVariantImageUpdate
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductVariantImageUpdate
     */
    'is_main'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductsCustomerFavouritesList200Response
 */
export interface ProductsCustomerFavouritesList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductFavourite>}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'results': Array<ProductFavourite>;
}
/**
 * 
 * @export
 * @interface ProductsCustomerReviewsList200Response
 */
export interface ProductsCustomerReviewsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductReview>}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'results': Array<ProductReview>;
}
/**
 * 
 * @export
 * @interface ProductsSellerProductVariantsList200Response
 */
export interface ProductsSellerProductVariantsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsSellerProductVariantsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerProductVariantsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerProductVariantsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof ProductsSellerProductVariantsList200Response
     */
    'results': Array<ProductVariant>;
}
/**
 * 
 * @export
 * @interface ProductsSellerProductsList200Response
 */
export interface ProductsSellerProductsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsSellerProductsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerProductsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerProductsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductsSellerProductsList200Response
     */
    'results': Array<Product>;
}
/**
 * 
 * @export
 * @interface ProductsSellerVariantImagesList200Response
 */
export interface ProductsSellerVariantImagesList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsSellerVariantImagesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerVariantImagesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerVariantImagesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductVariantImage>}
     * @memberof ProductsSellerVariantImagesList200Response
     */
    'results': Array<ProductVariantImage>;
}
/**
 * 
 * @export
 * @interface ResetEmail
 */
export interface ResetEmail {
    /**
     * 
     * @type {string}
     * @memberof ResetEmail
     */
    'current_password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetEmail
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ResetEmail
     */
    're_email': string;
}
/**
 * 
 * @export
 * @interface ResetEmailConfirm
 */
export interface ResetEmailConfirm {
    /**
     * 
     * @type {string}
     * @memberof ResetEmailConfirm
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ResetEmailConfirm
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordConfirm
 */
export interface ResetPasswordConfirm {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    're_password': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordSendEmail
 */
export interface ResetPasswordSendEmail {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordSendEmail
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordSendSMS
 */
export interface ResetPasswordSendSMS {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordSendSMS
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface ResetPhoneNumber
 */
export interface ResetPhoneNumber {
    /**
     * 
     * @type {string}
     * @memberof ResetPhoneNumber
     */
    'current_password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPhoneNumber
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPhoneNumber
     */
    're_phone_number': string;
}
/**
 * 
 * @export
 * @interface ResetPhoneNumberConfirm
 */
export interface ResetPhoneNumberConfirm {
    /**
     * 
     * @type {string}
     * @memberof ResetPhoneNumberConfirm
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPhoneNumberConfirm
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface SellerKey
 */
export interface SellerKey {
    /**
     * 
     * @type {string}
     * @memberof SellerKey
     */
    'key': string;
}
/**
 * 
 * @export
 * @interface SellersCustomerShopsList200Response
 */
export interface SellersCustomerShopsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SellersCustomerShopsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SellersCustomerShopsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SellersCustomerShopsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Shop>}
     * @memberof SellersCustomerShopsList200Response
     */
    'results': Array<Shop>;
}
/**
 * 
 * @export
 * @interface SellersSellerShopBranchesList200Response
 */
export interface SellersSellerShopBranchesList200Response {
    /**
     * 
     * @type {number}
     * @memberof SellersSellerShopBranchesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SellersSellerShopBranchesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SellersSellerShopBranchesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ShopBranch>}
     * @memberof SellersSellerShopBranchesList200Response
     */
    'results': Array<ShopBranch>;
}
/**
 * 
 * @export
 * @interface SetNewPassword
 */
export interface SetNewPassword {
    /**
     * 
     * @type {string}
     * @memberof SetNewPassword
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SetNewPassword
     */
    're_password': string;
    /**
     * 
     * @type {string}
     * @memberof SetNewPassword
     */
    'current_password': string;
}
/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'seller': number;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'status'?: ShopStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'site_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'instagram_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'whats_app_link'?: string | null;
    /**
     * 
     * @type {Array<ShopBranch>}
     * @memberof Shop
     */
    'branches'?: Array<ShopBranch>;
}

export const ShopStatusEnum = {
    Moderation: 'MODERATION',
    Active: 'ACTIVE'
} as const;

export type ShopStatusEnum = typeof ShopStatusEnum[keyof typeof ShopStatusEnum];

/**
 * 
 * @export
 * @interface ShopBranch
 */
export interface ShopBranch {
    /**
     * 
     * @type {number}
     * @memberof ShopBranch
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopBranch
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ShopBranch
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface ShopBranchCreate
 */
export interface ShopBranchCreate {
    /**
     * 
     * @type {number}
     * @memberof ShopBranchCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopBranchCreate
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ShopBranchCreate
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface ShopCreate
 */
export interface ShopCreate {
    /**
     * 
     * @type {string}
     * @memberof ShopCreate
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface ShopUpdate
 */
export interface ShopUpdate {
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'site_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'instagram_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'whats_app_link'?: string | null;
}
/**
 * 
 * @export
 * @interface SizeVariant
 */
export interface SizeVariant {
    /**
     * 
     * @type {string}
     * @memberof SizeVariant
     */
    'size': string;
    /**
     * 
     * @type {number}
     * @memberof SizeVariant
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof SizeVariant
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface Specification
 */
export interface Specification {
    /**
     * 
     * @type {number}
     * @memberof Specification
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'title': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Specification
     */
    'values': Array<string>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TokenObtainPairResponse
 */
export interface TokenObtainPairResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairResponse
     */
    'access': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairResponse
     */
    'refresh': string;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'refresh': string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface TokenRefreshResponse
 */
export interface TokenRefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshResponse
     */
    'access': string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshResponse
     */
    'refresh': string;
}
/**
 * 
 * @export
 * @interface TokenVerify
 */
export interface TokenVerify {
    /**
     * 
     * @type {string}
     * @memberof TokenVerify
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'type': UserTypeEnum;
}

export const UserTypeEnum = {
    Seller: 'SELLER',
    Customer: 'CUSTOMER'
} as const;

export type UserTypeEnum = typeof UserTypeEnum[keyof typeof UserTypeEnum];

/**
 * 
 * @export
 * @interface UserCustomerCreate
 */
export interface UserCustomerCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    're_password': string;
    /**
     * 
     * @type {CustomerCreate}
     * @memberof UserCustomerCreate
     */
    'customer': CustomerCreate;
}
/**
 * 
 * @export
 * @interface UserSellerCreate
 */
export interface UserSellerCreate {
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    're_password': string;
    /**
     * 
     * @type {ShopCreate}
     * @memberof UserSellerCreate
     */
    'shop': ShopCreate;
    /**
     * 
     * @type {SellerKey}
     * @memberof UserSellerCreate
     */
    'seller_key': SellerKey;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenCreate: async (data: TokenObtainPair, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsAuthTokenCreate', 'data', data)
            const localVarPath = `/accounts/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenRefreshCreate: async (data: TokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsAuthTokenRefreshCreate', 'data', data)
            const localVarPath = `/accounts/auth/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenVerifyCreate: async (data: TokenVerify, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsAuthTokenVerifyCreate', 'data', data)
            const localVarPath = `/accounts/auth/token/verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetEmailConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangeEmailConfirm: async (data: ResetEmailConfirm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersChangeEmailConfirm', 'data', data)
            const localVarPath = `/accounts/users/change_email_confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetEmail} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangeEmailRequest: async (data: ResetEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersChangeEmailRequest', 'data', data)
            const localVarPath = `/accounts/users/change_email_request/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPhoneNumberConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangePhoneNumberConfirm: async (data: ResetPhoneNumberConfirm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersChangePhoneNumberConfirm', 'data', data)
            const localVarPath = `/accounts/users/change_phone_number_confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPhoneNumber} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangePhoneNumberRequest: async (data: ResetPhoneNumber, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersChangePhoneNumberRequest', 'data', data)
            const localVarPath = `/accounts/users/change_phone_number_request/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreate: async (data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersCreate', 'data', data)
            const localVarPath = `/accounts/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCustomerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateCustomerCreate: async (data: UserCustomerCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersCreateCustomerCreate', 'data', data)
            const localVarPath = `/accounts/users/create_customer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSellerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateSellerCreate: async (data: UserSellerCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersCreateSellerCreate', 'data', data)
            const localVarPath = `/accounts/users/create_seller/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersDelete', 'id', id)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMePartialUpdate: async (data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersMePartialUpdate', 'data', data)
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeRead: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeUpdate: async (data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersMeUpdate', 'data', data)
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersPartialUpdate: async (id: number, data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersPartialUpdate', 'data', data)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersRead', 'id', id)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordConfirm: async (data: ResetPasswordConfirm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetPasswordConfirm', 'data', data)
            const localVarPath = `/accounts/users/reset_password_confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordSendEmail} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordRequestEmail: async (data: ResetPasswordSendEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetPasswordRequestEmail', 'data', data)
            const localVarPath = `/accounts/users/reset_password_request_email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordSendSMS} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordRequestPhoneNumber: async (data: ResetPasswordSendSMS, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetPasswordRequestPhoneNumber', 'data', data)
            const localVarPath = `/accounts/users/reset_password_request_phone_number/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetNewPassword} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersSetNewPassword: async (data: SetNewPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersSetNewPassword', 'data', data)
            const localVarPath = `/accounts/users/set_new_password/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersUpdate: async (id: number, data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersUpdate', 'data', data)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenRefreshCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenVerifyCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetEmailConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersChangeEmailConfirm(data: ResetEmailConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetEmailConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersChangeEmailConfirm(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetEmail} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersChangeEmailRequest(data: ResetEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetEmail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersChangeEmailRequest(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPhoneNumberConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersChangePhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPhoneNumberConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersChangePhoneNumberConfirm(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPhoneNumber} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersChangePhoneNumberRequest(data: ResetPhoneNumber, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPhoneNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersChangePhoneNumberRequest(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersCreate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserCustomerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersCreateCustomerCreate(data: UserCustomerCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCustomerCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersCreateCustomerCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserSellerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersCreateSellerCreate(data: UserSellerCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSellerCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersCreateSellerCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsUsersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMeDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMeDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMePartialUpdate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMePartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMeRead(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsUsersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMeRead(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMeUpdate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMeUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersPartialUpdate(id: number, data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetPasswordConfirm(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordSendEmail} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetPasswordRequestEmail(data: ResetPasswordSendEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordSendEmail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetPasswordRequestEmail(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordSendSMS} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetPasswordRequestPhoneNumber(data: ResetPasswordSendSMS, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordSendSMS>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetPasswordRequestPhoneNumber(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SetNewPassword} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersSetNewPassword(data: SetNewPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetNewPassword>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersSetNewPassword(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersUpdate(id: number, data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenCreate(data: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPairResponse> {
            return localVarFp.accountsAuthTokenCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: any): AxiosPromise<TokenRefreshResponse> {
            return localVarFp.accountsAuthTokenRefreshCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenVerifyCreate(data: TokenVerify, options?: any): AxiosPromise<object> {
            return localVarFp.accountsAuthTokenVerifyCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetEmailConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangeEmailConfirm(data: ResetEmailConfirm, options?: any): AxiosPromise<ResetEmailConfirm> {
            return localVarFp.accountsUsersChangeEmailConfirm(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetEmail} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangeEmailRequest(data: ResetEmail, options?: any): AxiosPromise<ResetEmail> {
            return localVarFp.accountsUsersChangeEmailRequest(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPhoneNumberConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangePhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: any): AxiosPromise<ResetPhoneNumberConfirm> {
            return localVarFp.accountsUsersChangePhoneNumberConfirm(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPhoneNumber} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersChangePhoneNumberRequest(data: ResetPhoneNumber, options?: any): AxiosPromise<ResetPhoneNumber> {
            return localVarFp.accountsUsersChangePhoneNumberRequest(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreate(data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCustomerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateCustomerCreate(data: UserCustomerCreate, options?: any): AxiosPromise<UserCustomerCreate> {
            return localVarFp.accountsUsersCreateCustomerCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserSellerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateSellerCreate(data: UserSellerCreate, options?: any): AxiosPromise<UserSellerCreate> {
            return localVarFp.accountsUsersCreateSellerCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.accountsUsersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersList(limit?: number, offset?: number, options?: any): AxiosPromise<AccountsUsersList200Response> {
            return localVarFp.accountsUsersList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeDelete(options?: any): AxiosPromise<void> {
            return localVarFp.accountsUsersMeDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMePartialUpdate(data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersMePartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeRead(limit?: number, offset?: number, options?: any): AxiosPromise<AccountsUsersList200Response> {
            return localVarFp.accountsUsersMeRead(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeUpdate(data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersMeUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersPartialUpdate(id: number, data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersRead(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: any): AxiosPromise<ResetPasswordConfirm> {
            return localVarFp.accountsUsersResetPasswordConfirm(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordSendEmail} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordRequestEmail(data: ResetPasswordSendEmail, options?: any): AxiosPromise<ResetPasswordSendEmail> {
            return localVarFp.accountsUsersResetPasswordRequestEmail(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordSendSMS} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordRequestPhoneNumber(data: ResetPasswordSendSMS, options?: any): AxiosPromise<ResetPasswordSendSMS> {
            return localVarFp.accountsUsersResetPasswordRequestPhoneNumber(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SetNewPassword} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersSetNewPassword(data: SetNewPassword, options?: any): AxiosPromise<SetNewPassword> {
            return localVarFp.accountsUsersSetNewPassword(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользователь.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersUpdate(id: number, data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - interface
 * @export
 * @interface AccountsApi
 */
export interface AccountsApiInterface {
    /**
     * 
     * @param {TokenObtainPair} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig): AxiosPromise<TokenObtainPairResponse>;

    /**
     * 
     * @param {TokenRefresh} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): AxiosPromise<TokenRefreshResponse>;

    /**
     * 
     * @param {TokenVerify} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {ResetEmailConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersChangeEmailConfirm(data: ResetEmailConfirm, options?: AxiosRequestConfig): AxiosPromise<ResetEmailConfirm>;

    /**
     * 
     * @param {ResetEmail} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersChangeEmailRequest(data: ResetEmail, options?: AxiosRequestConfig): AxiosPromise<ResetEmail>;

    /**
     * 
     * @param {ResetPhoneNumberConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersChangePhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: AxiosRequestConfig): AxiosPromise<ResetPhoneNumberConfirm>;

    /**
     * 
     * @param {ResetPhoneNumber} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersChangePhoneNumberRequest(data: ResetPhoneNumber, options?: AxiosRequestConfig): AxiosPromise<ResetPhoneNumber>;

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersCreate(data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {UserCustomerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersCreateCustomerCreate(data: UserCustomerCreate, options?: AxiosRequestConfig): AxiosPromise<UserCustomerCreate>;

    /**
     * 
     * @param {UserSellerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersCreateSellerCreate(data: UserSellerCreate, options?: AxiosRequestConfig): AxiosPromise<UserSellerCreate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<AccountsUsersList200Response>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMeDelete(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMePartialUpdate(data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMeRead(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<AccountsUsersList200Response>;

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMeUpdate(data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersPartialUpdate(id: number, data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersRead(id: number, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {ResetPasswordConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: AxiosRequestConfig): AxiosPromise<ResetPasswordConfirm>;

    /**
     * 
     * @param {ResetPasswordSendEmail} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetPasswordRequestEmail(data: ResetPasswordSendEmail, options?: AxiosRequestConfig): AxiosPromise<ResetPasswordSendEmail>;

    /**
     * 
     * @param {ResetPasswordSendSMS} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetPasswordRequestPhoneNumber(data: ResetPasswordSendSMS, options?: AxiosRequestConfig): AxiosPromise<ResetPasswordSendSMS>;

    /**
     * 
     * @param {SetNewPassword} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersSetNewPassword(data: SetNewPassword, options?: AxiosRequestConfig): AxiosPromise<SetNewPassword>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersUpdate(id: number, data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI implements AccountsApiInterface {
    /**
     * 
     * @param {TokenObtainPair} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TokenRefresh} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenRefreshCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TokenVerify} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenVerifyCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetEmailConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersChangeEmailConfirm(data: ResetEmailConfirm, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersChangeEmailConfirm(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetEmail} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersChangeEmailRequest(data: ResetEmail, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersChangeEmailRequest(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPhoneNumberConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersChangePhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersChangePhoneNumberConfirm(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPhoneNumber} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersChangePhoneNumberRequest(data: ResetPhoneNumber, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersChangePhoneNumberRequest(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersCreate(data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCustomerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersCreateCustomerCreate(data: UserCustomerCreate, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersCreateCustomerCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserSellerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersCreateSellerCreate(data: UserSellerCreate, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersCreateSellerCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersDelete(id: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMeDelete(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMeDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMePartialUpdate(data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMePartialUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMeRead(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMeRead(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMeUpdate(data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMeUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersPartialUpdate(id: number, data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersRead(id: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetPasswordConfirm(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordSendEmail} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetPasswordRequestEmail(data: ResetPasswordSendEmail, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetPasswordRequestEmail(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordSendSMS} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetPasswordRequestPhoneNumber(data: ResetPasswordSendSMS, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetPasswordRequestPhoneNumber(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SetNewPassword} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersSetNewPassword(data: SetNewPassword, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersSetNewPassword(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersUpdate(id: number, data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersCreate: async (data: Customer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customersCustomersCreate', 'data', data)
            const localVarPath = `/customers/customers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersDelete', 'id', id)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersList: async (user?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers/customers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersPartialUpdate: async (id: number, data: Customer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customersCustomersPartialUpdate', 'data', data)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersRead', 'id', id)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersUpdate: async (id: number, data: Customer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customersCustomersUpdate', 'data', data)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersCreate(data: Customer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersCustomersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersList(user, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersPartialUpdate(id: number, data: Customer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersUpdate(id: number, data: Customer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * 
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersCreate(data: Customer, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.customersCustomersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersList(user?: string, limit?: number, offset?: number, options?: any): AxiosPromise<CustomersCustomersList200Response> {
            return localVarFp.customersCustomersList(user, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersPartialUpdate(id: number, data: Customer, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersRead(id: number, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersUpdate(id: number, data: Customer, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - interface
 * @export
 * @interface CustomersApi
 */
export interface CustomersApiInterface {
    /**
     * 
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersCreate(data: Customer, options?: AxiosRequestConfig): AxiosPromise<Customer>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [user] user
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CustomersCustomersList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersPartialUpdate(id: number, data: Customer, options?: AxiosRequestConfig): AxiosPromise<Customer>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Customer>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersUpdate(id: number, data: Customer, options?: AxiosRequestConfig): AxiosPromise<Customer>;

}

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI implements CustomersApiInterface {
    /**
     * 
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersCreate(data: Customer, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersDelete(id: number, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [user] user
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersList(user, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersPartialUpdate(id: number, data: Customer, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersRead(id: number, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersUpdate(id: number, data: Customer, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ElasticApi - axios parameter creator
 * @export
 */
export const ElasticApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * :param request: :return:
         * @summary Functional suggest functionality.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsFunctionalSuggest: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/elastic/products/functional_suggest/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/elastic/products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('elasticProductsRead', 'slug', slug)
            const localVarPath = `/elastic/products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Suggest functionality.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsSuggest: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/elastic/products/suggest/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElasticApi - functional programming interface
 * @export
 */
export const ElasticApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ElasticApiAxiosParamCreator(configuration)
    return {
        /**
         * :param request: :return:
         * @summary Functional suggest functionality.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elasticProductsFunctionalSuggest(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElasticProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elasticProductsFunctionalSuggest(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elasticProductsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElasticProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elasticProductsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elasticProductsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elasticProductsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Suggest functionality.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elasticProductsSuggest(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElasticProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elasticProductsSuggest(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ElasticApi - factory interface
 * @export
 */
export const ElasticApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ElasticApiFp(configuration)
    return {
        /**
         * :param request: :return:
         * @summary Functional suggest functionality.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsFunctionalSuggest(limit?: number, offset?: number, options?: any): AxiosPromise<ElasticProductsList200Response> {
            return localVarFp.elasticProductsFunctionalSuggest(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsList(limit?: number, offset?: number, options?: any): AxiosPromise<ElasticProductsList200Response> {
            return localVarFp.elasticProductsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsRead(slug: string, options?: any): AxiosPromise<ProductDocument> {
            return localVarFp.elasticProductsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Suggest functionality.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elasticProductsSuggest(limit?: number, offset?: number, options?: any): AxiosPromise<ElasticProductsList200Response> {
            return localVarFp.elasticProductsSuggest(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ElasticApi - interface
 * @export
 * @interface ElasticApi
 */
export interface ElasticApiInterface {
    /**
     * :param request: :return:
     * @summary Functional suggest functionality.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApiInterface
     */
    elasticProductsFunctionalSuggest(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ElasticProductsList200Response>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApiInterface
     */
    elasticProductsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ElasticProductsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApiInterface
     */
    elasticProductsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<ProductDocument>;

    /**
     * Suggest functionality.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApiInterface
     */
    elasticProductsSuggest(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ElasticProductsList200Response>;

}

/**
 * ElasticApi - object-oriented interface
 * @export
 * @class ElasticApi
 * @extends {BaseAPI}
 */
export class ElasticApi extends BaseAPI implements ElasticApiInterface {
    /**
     * :param request: :return:
     * @summary Functional suggest functionality.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApi
     */
    public elasticProductsFunctionalSuggest(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ElasticApiFp(this.configuration).elasticProductsFunctionalSuggest(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApi
     */
    public elasticProductsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ElasticApiFp(this.configuration).elasticProductsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApi
     */
    public elasticProductsRead(slug: string, options?: AxiosRequestConfig) {
        return ElasticApiFp(this.configuration).elasticProductsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Suggest functionality.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElasticApi
     */
    public elasticProductsSuggest(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ElasticApiFp(this.configuration).elasticProductsSuggest(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CartItemCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsCreate: async (data: CartItemCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ordersCustomerCartItemsCreate', 'data', data)
            const localVarPath = `/orders/customer/cart_items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerCartItemsDelete', 'id', id)
            const localVarPath = `/orders/customer/cart_items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/customer/cart_items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {CartItemUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsPartialUpdate: async (id: number, data: CartItemUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerCartItemsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ordersCustomerCartItemsPartialUpdate', 'data', data)
            const localVarPath = `/orders/customer/cart_items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerCartItemsRead', 'id', id)
            const localVarPath = `/orders/customer/cart_items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {CartItem} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsUpdate: async (id: number, data: CartItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerCartItemsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ordersCustomerCartItemsUpdate', 'data', data)
            const localVarPath = `/orders/customer/cart_items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/customer/carts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerCartsRead', 'id', id)
            const localVarPath = `/orders/customer/carts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrderCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersCreate: async (data: OrderCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ordersCustomerOrdersCreate', 'data', data)
            const localVarPath = `/orders/customer/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerOrdersDelete', 'id', id)
            const localVarPath = `/orders/customer/orders/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersList: async (ordering?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/customer/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {Order} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersPartialUpdate: async (id: number, data: Order, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerOrdersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ordersCustomerOrdersPartialUpdate', 'data', data)
            const localVarPath = `/orders/customer/orders/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerOrdersRead', 'id', id)
            const localVarPath = `/orders/customer/orders/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {Order} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersUpdate: async (id: number, data: Order, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersCustomerOrdersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ordersCustomerOrdersUpdate', 'data', data)
            const localVarPath = `/orders/customer/orders/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSellerOrdersList: async (ordering?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/seller/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSellerOrdersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersSellerOrdersRead', 'id', id)
            const localVarPath = `/orders/seller/orders/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CartItemCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartItemsCreate(data: CartItemCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItemCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartItemsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartItemsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartItemsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartItemsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersCustomerCartItemsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartItemsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {CartItemUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartItemsPartialUpdate(id: number, data: CartItemUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItemUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartItemsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartItemsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartItemsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {CartItem} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartItemsUpdate(id: number, data: CartItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartItemsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersCustomerCartsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerCartsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerCartsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OrderCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerOrdersCreate(data: OrderCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerOrdersCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerOrdersDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerOrdersDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerOrdersList(ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersCustomerOrdersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerOrdersList(ordering, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {Order} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerOrdersPartialUpdate(id: number, data: Order, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerOrdersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerOrdersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerOrdersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {Order} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersCustomerOrdersUpdate(id: number, data: Order, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCustomerOrdersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersSellerOrdersList(ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersCustomerOrdersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersSellerOrdersList(ordering, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersSellerOrdersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersSellerOrdersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {CartItemCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsCreate(data: CartItemCreate, options?: any): AxiosPromise<CartItemCreate> {
            return localVarFp.ordersCustomerCartItemsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.ordersCustomerCartItemsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsList(limit?: number, offset?: number, options?: any): AxiosPromise<OrdersCustomerCartItemsList200Response> {
            return localVarFp.ordersCustomerCartItemsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {CartItemUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsPartialUpdate(id: number, data: CartItemUpdate, options?: any): AxiosPromise<CartItemUpdate> {
            return localVarFp.ordersCustomerCartItemsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsRead(id: number, options?: any): AxiosPromise<CartItem> {
            return localVarFp.ordersCustomerCartItemsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart item.
         * @param {CartItem} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartItemsUpdate(id: number, data: CartItem, options?: any): AxiosPromise<CartItem> {
            return localVarFp.ordersCustomerCartItemsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartsList(limit?: number, offset?: number, options?: any): AxiosPromise<OrdersCustomerCartsList200Response> {
            return localVarFp.ordersCustomerCartsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Cart.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerCartsRead(id: number, options?: any): AxiosPromise<Cart> {
            return localVarFp.ordersCustomerCartsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersCreate(data: OrderCreate, options?: any): AxiosPromise<OrderCreate> {
            return localVarFp.ordersCustomerOrdersCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.ordersCustomerOrdersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersList(ordering?: string, limit?: number, offset?: number, options?: any): AxiosPromise<OrdersCustomerOrdersList200Response> {
            return localVarFp.ordersCustomerOrdersList(ordering, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {Order} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersPartialUpdate(id: number, data: Order, options?: any): AxiosPromise<Order> {
            return localVarFp.ordersCustomerOrdersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersRead(id: number, options?: any): AxiosPromise<Order> {
            return localVarFp.ordersCustomerOrdersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {Order} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersCustomerOrdersUpdate(id: number, data: Order, options?: any): AxiosPromise<Order> {
            return localVarFp.ordersCustomerOrdersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSellerOrdersList(ordering?: string, limit?: number, offset?: number, options?: any): AxiosPromise<OrdersCustomerOrdersList200Response> {
            return localVarFp.ordersSellerOrdersList(ordering, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Порядок.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSellerOrdersRead(id: number, options?: any): AxiosPromise<Order> {
            return localVarFp.ordersSellerOrdersRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - interface
 * @export
 * @interface OrdersApi
 */
export interface OrdersApiInterface {
    /**
     * 
     * @param {CartItemCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartItemsCreate(data: CartItemCreate, options?: AxiosRequestConfig): AxiosPromise<CartItemCreate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartItemsDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartItemsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<OrdersCustomerCartItemsList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {CartItemUpdate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartItemsPartialUpdate(id: number, data: CartItemUpdate, options?: AxiosRequestConfig): AxiosPromise<CartItemUpdate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartItemsRead(id: number, options?: AxiosRequestConfig): AxiosPromise<CartItem>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {CartItem} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartItemsUpdate(id: number, data: CartItem, options?: AxiosRequestConfig): AxiosPromise<CartItem>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<OrdersCustomerCartsList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerCartsRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Cart>;

    /**
     * 
     * @param {OrderCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerOrdersCreate(data: OrderCreate, options?: AxiosRequestConfig): AxiosPromise<OrderCreate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerOrdersDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerOrdersList(ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<OrdersCustomerOrdersList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {Order} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerOrdersPartialUpdate(id: number, data: Order, options?: AxiosRequestConfig): AxiosPromise<Order>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerOrdersRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Order>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {Order} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersCustomerOrdersUpdate(id: number, data: Order, options?: AxiosRequestConfig): AxiosPromise<Order>;

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersSellerOrdersList(ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<OrdersCustomerOrdersList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersSellerOrdersRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Order>;

}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI implements OrdersApiInterface {
    /**
     * 
     * @param {CartItemCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartItemsCreate(data: CartItemCreate, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartItemsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartItemsDelete(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartItemsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartItemsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartItemsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {CartItemUpdate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartItemsPartialUpdate(id: number, data: CartItemUpdate, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartItemsPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartItemsRead(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartItemsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart item.
     * @param {CartItem} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartItemsUpdate(id: number, data: CartItem, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartItemsUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Cart.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerCartsRead(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerCartsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerOrdersCreate(data: OrderCreate, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerOrdersCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerOrdersDelete(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerOrdersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerOrdersList(ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerOrdersList(ordering, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {Order} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerOrdersPartialUpdate(id: number, data: Order, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerOrdersPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerOrdersRead(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerOrdersRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {Order} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersCustomerOrdersUpdate(id: number, data: Order, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersCustomerOrdersUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersSellerOrdersList(ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersSellerOrdersList(ordering, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Порядок.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersSellerOrdersRead(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersSellerOrdersRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsCategoriesRead', 'slug', slug)
            const localVarPath = `/products/categories/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesCreate: async (data: ProductFavourite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerFavouritesCreate', 'data', data)
            const localVarPath = `/products/customer/favourites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [product] product
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesList: async (product?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/customer/favourites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerProductsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsCustomerProductsRead', 'slug', slug)
            const localVarPath = `/products/customer/products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsCreate: async (data: ProductReviewCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerReviewsCreate', 'data', data)
            const localVarPath = `/products/customer/reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [product] product
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsList: async (product?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/customer/reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductVariantCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsCreate: async (data: ProductVariantCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductVariantsCreate', 'data', data)
            const localVarPath = `/products/seller/product_variants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsDelete: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductVariantsDelete', 'slug', slug)
            const localVarPath = `/products/seller/product_variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/seller/product_variants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsPartialUpdate: async (slug: string, data: ProductVariant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductVariantsPartialUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductVariantsPartialUpdate', 'data', data)
            const localVarPath = `/products/seller/product_variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductVariantsRead', 'slug', slug)
            const localVarPath = `/products/seller/product_variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsUpdate: async (slug: string, data: ProductVariant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductVariantsUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductVariantsUpdate', 'data', data)
            const localVarPath = `/products/seller/product_variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsCreate: async (data: ProductCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductsCreate', 'data', data)
            const localVarPath = `/products/seller/products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsDelete: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsDelete', 'slug', slug)
            const localVarPath = `/products/seller/products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductsSellerProductsListGenderEnum} [gender] gender
         * @param {string} [forKids] for_kids
         * @param {string} [category] category
         * @param {ProductsSellerProductsListStatusEnum} [status] status
         * @param {string} [publishDate] publish_date
         * @param {string} [colors] colors
         * @param {string} [sizes] sizes
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsList: async (gender?: ProductsSellerProductsListGenderEnum, forKids?: string, category?: string, status?: ProductsSellerProductsListStatusEnum, publishDate?: string, colors?: string, sizes?: string, search?: string, ordering?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/seller/products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (forKids !== undefined) {
                localVarQueryParameter['for_kids'] = forKids;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (publishDate !== undefined) {
                localVarQueryParameter['publish_date'] = publishDate;
            }

            if (colors !== undefined) {
                localVarQueryParameter['colors'] = colors;
            }

            if (sizes !== undefined) {
                localVarQueryParameter['sizes'] = sizes;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsPartialUpdate: async (slug: string, data: ProductUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsPartialUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductsPartialUpdate', 'data', data)
            const localVarPath = `/products/seller/products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsRead', 'slug', slug)
            const localVarPath = `/products/seller/products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsUpdate: async (slug: string, data: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductsUpdate', 'data', data)
            const localVarPath = `/products/seller/products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} variant 
         * @param {File} image 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesCreate: async (variant: number, image: File, isMain?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variant' is not null or undefined
            assertParamExists('productsSellerVariantImagesCreate', 'variant', variant)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('productsSellerVariantImagesCreate', 'image', image)
            const localVarPath = `/products/seller/variant_images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (variant !== undefined) { 
                localVarFormParams.append('variant', variant as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (isMain !== undefined) { 
                localVarFormParams.append('is_main', isMain as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantImagesDelete', 'id', id)
            const localVarPath = `/products/seller/variant_images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/seller/variant_images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {File} [image] 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesPartialUpdate: async (id: number, image?: File, isMain?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantImagesPartialUpdate', 'id', id)
            const localVarPath = `/products/seller/variant_images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (isMain !== undefined) { 
                localVarFormParams.append('is_main', isMain as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantImagesRead', 'id', id)
            const localVarPath = `/products/seller/variant_images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesUpdate: async (id: number, variant: number, image: File, isMain?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantImagesUpdate', 'id', id)
            // verify required parameter 'variant' is not null or undefined
            assertParamExists('productsSellerVariantImagesUpdate', 'variant', variant)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('productsSellerVariantImagesUpdate', 'image', image)
            const localVarPath = `/products/seller/variant_images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (variant !== undefined) { 
                localVarFormParams.append('variant', variant as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (isMain !== undefined) { 
                localVarFormParams.append('is_main', isMain as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSpecificationsList: async (search?: string, title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/specifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsCreate: async (data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTagsCreate', 'data', data)
            const localVarPath = `/products/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsList: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsCreate: async (data: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTestsCreate', 'data', data)
            const localVarPath = `/products/tests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsTestsDelete', 'id', id)
            const localVarPath = `/products/tests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/tests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsPartialUpdate: async (id: number, data: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsTestsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTestsPartialUpdate', 'data', data)
            const localVarPath = `/products/tests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsTestsRead', 'id', id)
            const localVarPath = `/products/tests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsUpdate: async (id: number, data: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsTestsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTestsUpdate', 'data', data)
            const localVarPath = `/products/tests/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCategoriesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCategoriesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCategoriesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCategoriesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesCreate(data: ProductFavourite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFavourite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [product] product
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesList(product?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCustomerFavouritesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesList(product, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerProductsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerProductsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsCreate(data: ProductReviewCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [product] product
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsList(product?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCustomerReviewsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsList(product, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductVariantCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductVariantsCreate(data: ProductVariantCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductVariantsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductVariantsDelete(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductVariantsDelete(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductVariantsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsSellerProductVariantsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductVariantsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductVariantsPartialUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductVariantsPartialUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductVariantsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductVariantsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductVariantsUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductVariantsUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsCreate(data: ProductCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsDelete(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsDelete(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductsSellerProductsListGenderEnum} [gender] gender
         * @param {string} [forKids] for_kids
         * @param {string} [category] category
         * @param {ProductsSellerProductsListStatusEnum} [status] status
         * @param {string} [publishDate] publish_date
         * @param {string} [colors] colors
         * @param {string} [sizes] sizes
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsList(gender?: ProductsSellerProductsListGenderEnum, forKids?: string, category?: string, status?: ProductsSellerProductsListStatusEnum, publishDate?: string, colors?: string, sizes?: string, search?: string, ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsSellerProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsList(gender, forKids, category, status, publishDate, colors, sizes, search, ordering, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsPartialUpdate(slug: string, data: ProductUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsPartialUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsUpdate(slug: string, data: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} variant 
         * @param {File} image 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantImagesCreate(variant: number, image: File, isMain?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantImagesCreate(variant, image, isMain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantImagesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantImagesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantImagesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsSellerVariantImagesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantImagesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {File} [image] 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantImagesPartialUpdate(id: number, image?: File, isMain?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImageUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantImagesPartialUpdate(id, image, isMain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantImagesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantImagesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantImagesUpdate(id: number, variant: number, image: File, isMain?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantImagesUpdate(id, variant, image, isMain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSpecificationsList(search?: string, title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Specification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSpecificationsList(search, title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsCreate(data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsList(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsList(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTestsCreate(data: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTestsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTestsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTestsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTestsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsSellerProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTestsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTestsPartialUpdate(id: number, data: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTestsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTestsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTestsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTestsUpdate(id: number, data: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTestsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesList(options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.productsCategoriesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesRead(slug: string, options?: any): AxiosPromise<Category> {
            return localVarFp.productsCategoriesRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesCreate(data: ProductFavourite, options?: any): AxiosPromise<ProductFavourite> {
            return localVarFp.productsCustomerFavouritesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [product] product
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesList(product?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProductsCustomerFavouritesList200Response> {
            return localVarFp.productsCustomerFavouritesList(product, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerProductsRead(slug: string, options?: any): AxiosPromise<Product> {
            return localVarFp.productsCustomerProductsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsCreate(data: ProductReviewCreate, options?: any): AxiosPromise<ProductReviewCreate> {
            return localVarFp.productsCustomerReviewsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [product] product
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsList(product?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProductsCustomerReviewsList200Response> {
            return localVarFp.productsCustomerReviewsList(product, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductVariantCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsCreate(data: ProductVariantCreate, options?: any): AxiosPromise<ProductVariantCreate> {
            return localVarFp.productsSellerProductVariantsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsDelete(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.productsSellerProductVariantsDelete(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsSellerProductVariantsList200Response> {
            return localVarFp.productsSellerProductVariantsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsPartialUpdate(slug: string, data: ProductVariant, options?: any): AxiosPromise<ProductVariant> {
            return localVarFp.productsSellerProductVariantsPartialUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsRead(slug: string, options?: any): AxiosPromise<ProductVariant> {
            return localVarFp.productsSellerProductVariantsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductVariantsUpdate(slug: string, data: ProductVariant, options?: any): AxiosPromise<ProductVariant> {
            return localVarFp.productsSellerProductVariantsUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsCreate(data: ProductCreate, options?: any): AxiosPromise<ProductCreate> {
            return localVarFp.productsSellerProductsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsDelete(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.productsSellerProductsDelete(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductsSellerProductsListGenderEnum} [gender] gender
         * @param {string} [forKids] for_kids
         * @param {string} [category] category
         * @param {ProductsSellerProductsListStatusEnum} [status] status
         * @param {string} [publishDate] publish_date
         * @param {string} [colors] colors
         * @param {string} [sizes] sizes
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsList(gender?: ProductsSellerProductsListGenderEnum, forKids?: string, category?: string, status?: ProductsSellerProductsListStatusEnum, publishDate?: string, colors?: string, sizes?: string, search?: string, ordering?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProductsSellerProductsList200Response> {
            return localVarFp.productsSellerProductsList(gender, forKids, category, status, publishDate, colors, sizes, search, ordering, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsPartialUpdate(slug: string, data: ProductUpdate, options?: any): AxiosPromise<ProductUpdate> {
            return localVarFp.productsSellerProductsPartialUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsRead(slug: string, options?: any): AxiosPromise<Product> {
            return localVarFp.productsSellerProductsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsUpdate(slug: string, data: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.productsSellerProductsUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} variant 
         * @param {File} image 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesCreate(variant: number, image: File, isMain?: boolean, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantImagesCreate(variant, image, isMain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productsSellerVariantImagesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsSellerVariantImagesList200Response> {
            return localVarFp.productsSellerVariantImagesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {File} [image] 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesPartialUpdate(id: number, image?: File, isMain?: boolean, options?: any): AxiosPromise<ProductVariantImageUpdate> {
            return localVarFp.productsSellerVariantImagesPartialUpdate(id, image, isMain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesRead(id: number, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantImagesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {boolean} [isMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantImagesUpdate(id: number, variant: number, image: File, isMain?: boolean, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantImagesUpdate(id, variant, image, isMain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {string} [title] title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSpecificationsList(search?: string, title?: string, options?: any): AxiosPromise<Array<Specification>> {
            return localVarFp.productsSpecificationsList(search, title, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsCreate(data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.productsTagsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsList(search?: string, options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.productsTagsList(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsCreate(data: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.productsTestsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productsTestsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsSellerProductsList200Response> {
            return localVarFp.productsTestsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsPartialUpdate(id: number, data: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.productsTestsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsRead(id: number, options?: any): AxiosPromise<Product> {
            return localVarFp.productsTestsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product.
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTestsUpdate(id: number, data: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.productsTestsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - interface
 * @export
 * @interface ProductsApi
 */
export interface ProductsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCategoriesList(options?: AxiosRequestConfig): AxiosPromise<Array<Category>>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCategoriesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Category>;

    /**
     * 
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesCreate(data: ProductFavourite, options?: AxiosRequestConfig): AxiosPromise<ProductFavourite>;

    /**
     * 
     * @param {string} [product] product
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesList(product?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsCustomerFavouritesList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerProductsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {ProductReviewCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsCreate(data: ProductReviewCreate, options?: AxiosRequestConfig): AxiosPromise<ProductReviewCreate>;

    /**
     * 
     * @param {string} [product] product
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsList(product?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsCustomerReviewsList200Response>;

    /**
     * 
     * @param {ProductVariantCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductVariantsCreate(data: ProductVariantCreate, options?: AxiosRequestConfig): AxiosPromise<ProductVariantCreate>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductVariantsDelete(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductVariantsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsSellerProductVariantsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductVariantsPartialUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): AxiosPromise<ProductVariant>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductVariantsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<ProductVariant>;

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductVariantsUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): AxiosPromise<ProductVariant>;

    /**
     * 
     * @param {ProductCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsCreate(data: ProductCreate, options?: AxiosRequestConfig): AxiosPromise<ProductCreate>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsDelete(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {ProductsSellerProductsListGenderEnum} [gender] gender
     * @param {string} [forKids] for_kids
     * @param {string} [category] category
     * @param {ProductsSellerProductsListStatusEnum} [status] status
     * @param {string} [publishDate] publish_date
     * @param {string} [colors] colors
     * @param {string} [sizes] sizes
     * @param {string} [search] A search term.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsList(gender?: ProductsSellerProductsListGenderEnum, forKids?: string, category?: string, status?: ProductsSellerProductsListStatusEnum, publishDate?: string, colors?: string, sizes?: string, search?: string, ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsSellerProductsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {ProductUpdate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsPartialUpdate(slug: string, data: ProductUpdate, options?: AxiosRequestConfig): AxiosPromise<ProductUpdate>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {string} slug 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsUpdate(slug: string, data: Product, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {number} variant 
     * @param {File} image 
     * @param {boolean} [isMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantImagesCreate(variant: number, image: File, isMain?: boolean, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantImagesDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantImagesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsSellerVariantImagesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {File} [image] 
     * @param {boolean} [isMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantImagesPartialUpdate(id: number, image?: File, isMain?: boolean, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImageUpdate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantImagesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {number} variant 
     * @param {File} image 
     * @param {boolean} [isMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantImagesUpdate(id: number, variant: number, image: File, isMain?: boolean, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {string} [search] A search term.
     * @param {string} [title] title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSpecificationsList(search?: string, title?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Specification>>;

    /**
     * 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsCreate(data: Tag, options?: AxiosRequestConfig): AxiosPromise<Tag>;

    /**
     * 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsList(search?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Tag>>;

    /**
     * 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTestsCreate(data: Product, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTestsDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTestsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsSellerProductsList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTestsPartialUpdate(id: number, data: Product, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTestsRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTestsUpdate(id: number, data: Product, options?: AxiosRequestConfig): AxiosPromise<Product>;

}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI implements ProductsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCategoriesList(options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCategoriesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCategoriesRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCategoriesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesCreate(data: ProductFavourite, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [product] product
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesList(product?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesList(product, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerProductsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerProductsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductReviewCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsCreate(data: ProductReviewCreate, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [product] product
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsList(product?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsList(product, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductVariantCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductVariantsCreate(data: ProductVariantCreate, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductVariantsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductVariantsDelete(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductVariantsDelete(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductVariantsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductVariantsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductVariantsPartialUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductVariantsPartialUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductVariantsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductVariantsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductVariantsUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductVariantsUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsCreate(data: ProductCreate, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsDelete(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsDelete(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsSellerProductsListGenderEnum} [gender] gender
     * @param {string} [forKids] for_kids
     * @param {string} [category] category
     * @param {ProductsSellerProductsListStatusEnum} [status] status
     * @param {string} [publishDate] publish_date
     * @param {string} [colors] colors
     * @param {string} [sizes] sizes
     * @param {string} [search] A search term.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsList(gender?: ProductsSellerProductsListGenderEnum, forKids?: string, category?: string, status?: ProductsSellerProductsListStatusEnum, publishDate?: string, colors?: string, sizes?: string, search?: string, ordering?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsList(gender, forKids, category, status, publishDate, colors, sizes, search, ordering, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {ProductUpdate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsPartialUpdate(slug: string, data: ProductUpdate, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsPartialUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsUpdate(slug: string, data: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} variant 
     * @param {File} image 
     * @param {boolean} [isMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantImagesCreate(variant: number, image: File, isMain?: boolean, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantImagesCreate(variant, image, isMain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantImagesDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantImagesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantImagesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantImagesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {File} [image] 
     * @param {boolean} [isMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantImagesPartialUpdate(id: number, image?: File, isMain?: boolean, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantImagesPartialUpdate(id, image, isMain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantImagesRead(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantImagesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {number} variant 
     * @param {File} image 
     * @param {boolean} [isMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantImagesUpdate(id: number, variant: number, image: File, isMain?: boolean, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantImagesUpdate(id, variant, image, isMain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] A search term.
     * @param {string} [title] title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSpecificationsList(search?: string, title?: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSpecificationsList(search, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsCreate(data: Tag, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsList(search?: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsList(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTestsCreate(data: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTestsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTestsDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTestsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTestsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTestsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTestsPartialUpdate(id: number, data: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTestsPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTestsRead(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTestsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product.
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTestsUpdate(id: number, data: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTestsUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ProductsSellerProductsListGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Unisex: 'UNISEX'
} as const;
export type ProductsSellerProductsListGenderEnum = typeof ProductsSellerProductsListGenderEnum[keyof typeof ProductsSellerProductsListGenderEnum];
/**
 * @export
 */
export const ProductsSellerProductsListStatusEnum = {
    Draft: 'DRAFT',
    Scheduled: 'SCHEDULED',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    Archive: 'ARCHIVE'
} as const;
export type ProductsSellerProductsListStatusEnum = typeof ProductsSellerProductsListStatusEnum[keyof typeof ProductsSellerProductsListStatusEnum];


/**
 * SellersApi - axios parameter creator
 * @export
 */
export const SellersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersCustomerShopsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sellers/customer/shops/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersCustomerShopsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('sellersCustomerShopsRead', 'slug', slug)
            const localVarPath = `/sellers/customer/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShopBranchCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesCreate: async (data: ShopBranchCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sellersSellerShopBranchesCreate', 'data', data)
            const localVarPath = `/sellers/seller/shop_branches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sellersSellerShopBranchesDelete', 'id', id)
            const localVarPath = `/sellers/seller/shop_branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sellers/seller/shop_branches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {ShopBranch} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesPartialUpdate: async (id: number, data: ShopBranch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sellersSellerShopBranchesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sellersSellerShopBranchesPartialUpdate', 'data', data)
            const localVarPath = `/sellers/seller/shop_branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sellersSellerShopBranchesRead', 'id', id)
            const localVarPath = `/sellers/seller/shop_branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {ShopBranch} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesUpdate: async (id: number, data: ShopBranch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sellersSellerShopBranchesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sellersSellerShopBranchesUpdate', 'data', data)
            const localVarPath = `/sellers/seller/shop_branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sellers/seller/shops/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {string} title 
         * @param {string | null} [description] 
         * @param {File | null} [logo] 
         * @param {string | null} [siteLink] 
         * @param {string | null} [instagramLink] 
         * @param {string | null} [whatsAppLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopsPartialUpdate: async (slug: string, title: string, description?: string | null, logo?: File | null, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('sellersSellerShopsPartialUpdate', 'slug', slug)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('sellersSellerShopsPartialUpdate', 'title', title)
            const localVarPath = `/sellers/seller/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }
    
            if (siteLink !== undefined) { 
                localVarFormParams.append('site_link', siteLink as any);
            }
    
            if (instagramLink !== undefined) { 
                localVarFormParams.append('instagram_link', instagramLink as any);
            }
    
            if (whatsAppLink !== undefined) { 
                localVarFormParams.append('whats_app_link', whatsAppLink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {string} slug2 
         * @param {string} title 
         * @param {number} seller 
         * @param {File | null} [logo] 
         * @param {string | null} [description] 
         * @param {SellersSellerShopsUpdateStatusEnum} [status] 
         * @param {string | null} [siteLink] 
         * @param {string | null} [instagramLink] 
         * @param {string | null} [whatsAppLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopsUpdate: async (slug: string, slug2: string, title: string, seller: number, logo?: File | null, description?: string | null, status?: SellersSellerShopsUpdateStatusEnum, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('sellersSellerShopsUpdate', 'slug', slug)
            // verify required parameter 'slug2' is not null or undefined
            assertParamExists('sellersSellerShopsUpdate', 'slug2', slug2)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('sellersSellerShopsUpdate', 'title', title)
            // verify required parameter 'seller' is not null or undefined
            assertParamExists('sellersSellerShopsUpdate', 'seller', seller)
            const localVarPath = `/sellers/seller/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (slug2 !== undefined) { 
                localVarFormParams.append('slug', slug2 as any);
            }
    
            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (seller !== undefined) { 
                localVarFormParams.append('seller', seller as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('status', status as any);
            }
    
            if (siteLink !== undefined) { 
                localVarFormParams.append('site_link', siteLink as any);
            }
    
            if (instagramLink !== undefined) { 
                localVarFormParams.append('instagram_link', instagramLink as any);
            }
    
            if (whatsAppLink !== undefined) { 
                localVarFormParams.append('whats_app_link', whatsAppLink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SellersApi - functional programming interface
 * @export
 */
export const SellersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SellersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersCustomerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellersCustomerShopsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersCustomerShopsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersCustomerShopsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersCustomerShopsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ShopBranchCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopBranchesCreate(data: ShopBranchCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBranchCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopBranchesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopBranchesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopBranchesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopBranchesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellersSellerShopBranchesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopBranchesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {ShopBranch} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopBranchesPartialUpdate(id: number, data: ShopBranch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBranch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopBranchesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopBranchesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBranch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopBranchesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {ShopBranch} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopBranchesUpdate(id: number, data: ShopBranch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBranch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopBranchesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellersCustomerShopsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {string} title 
         * @param {string | null} [description] 
         * @param {File | null} [logo] 
         * @param {string | null} [siteLink] 
         * @param {string | null} [instagramLink] 
         * @param {string | null} [whatsAppLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopsPartialUpdate(slug: string, title: string, description?: string | null, logo?: File | null, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopsPartialUpdate(slug, title, description, logo, siteLink, instagramLink, whatsAppLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {string} slug2 
         * @param {string} title 
         * @param {number} seller 
         * @param {File | null} [logo] 
         * @param {string | null} [description] 
         * @param {SellersSellerShopsUpdateStatusEnum} [status] 
         * @param {string | null} [siteLink] 
         * @param {string | null} [instagramLink] 
         * @param {string | null} [whatsAppLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellersSellerShopsUpdate(slug: string, slug2: string, title: string, seller: number, logo?: File | null, description?: string | null, status?: SellersSellerShopsUpdateStatusEnum, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellersSellerShopsUpdate(slug, slug2, title, seller, logo, description, status, siteLink, instagramLink, whatsAppLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SellersApi - factory interface
 * @export
 */
export const SellersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SellersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersCustomerShopsList(limit?: number, offset?: number, options?: any): AxiosPromise<SellersCustomerShopsList200Response> {
            return localVarFp.sellersCustomerShopsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersCustomerShopsRead(slug: string, options?: any): AxiosPromise<Shop> {
            return localVarFp.sellersCustomerShopsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShopBranchCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesCreate(data: ShopBranchCreate, options?: any): AxiosPromise<ShopBranchCreate> {
            return localVarFp.sellersSellerShopBranchesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.sellersSellerShopBranchesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesList(limit?: number, offset?: number, options?: any): AxiosPromise<SellersSellerShopBranchesList200Response> {
            return localVarFp.sellersSellerShopBranchesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {ShopBranch} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesPartialUpdate(id: number, data: ShopBranch, options?: any): AxiosPromise<ShopBranch> {
            return localVarFp.sellersSellerShopBranchesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesRead(id: number, options?: any): AxiosPromise<ShopBranch> {
            return localVarFp.sellersSellerShopBranchesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {ShopBranch} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopBranchesUpdate(id: number, data: ShopBranch, options?: any): AxiosPromise<ShopBranch> {
            return localVarFp.sellersSellerShopBranchesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopsList(limit?: number, offset?: number, options?: any): AxiosPromise<SellersCustomerShopsList200Response> {
            return localVarFp.sellersSellerShopsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {string} title 
         * @param {string | null} [description] 
         * @param {File | null} [logo] 
         * @param {string | null} [siteLink] 
         * @param {string | null} [instagramLink] 
         * @param {string | null} [whatsAppLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopsPartialUpdate(slug: string, title: string, description?: string | null, logo?: File | null, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: any): AxiosPromise<ShopUpdate> {
            return localVarFp.sellersSellerShopsPartialUpdate(slug, title, description, logo, siteLink, instagramLink, whatsAppLink, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {string} slug2 
         * @param {string} title 
         * @param {number} seller 
         * @param {File | null} [logo] 
         * @param {string | null} [description] 
         * @param {SellersSellerShopsUpdateStatusEnum} [status] 
         * @param {string | null} [siteLink] 
         * @param {string | null} [instagramLink] 
         * @param {string | null} [whatsAppLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellersSellerShopsUpdate(slug: string, slug2: string, title: string, seller: number, logo?: File | null, description?: string | null, status?: SellersSellerShopsUpdateStatusEnum, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: any): AxiosPromise<Shop> {
            return localVarFp.sellersSellerShopsUpdate(slug, slug2, title, seller, logo, description, status, siteLink, instagramLink, whatsAppLink, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SellersApi - interface
 * @export
 * @interface SellersApi
 */
export interface SellersApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersCustomerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<SellersCustomerShopsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersCustomerShopsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Shop>;

    /**
     * 
     * @param {ShopBranchCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopBranchesCreate(data: ShopBranchCreate, options?: AxiosRequestConfig): AxiosPromise<ShopBranchCreate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopBranchesDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopBranchesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<SellersSellerShopBranchesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {ShopBranch} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopBranchesPartialUpdate(id: number, data: ShopBranch, options?: AxiosRequestConfig): AxiosPromise<ShopBranch>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopBranchesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<ShopBranch>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {ShopBranch} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopBranchesUpdate(id: number, data: ShopBranch, options?: AxiosRequestConfig): AxiosPromise<ShopBranch>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<SellersCustomerShopsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {string} title 
     * @param {string | null} [description] 
     * @param {File | null} [logo] 
     * @param {string | null} [siteLink] 
     * @param {string | null} [instagramLink] 
     * @param {string | null} [whatsAppLink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopsPartialUpdate(slug: string, title: string, description?: string | null, logo?: File | null, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: AxiosRequestConfig): AxiosPromise<ShopUpdate>;

    /**
     * 
     * @param {string} slug 
     * @param {string} slug2 
     * @param {string} title 
     * @param {number} seller 
     * @param {File | null} [logo] 
     * @param {string | null} [description] 
     * @param {SellersSellerShopsUpdateStatusEnum} [status] 
     * @param {string | null} [siteLink] 
     * @param {string | null} [instagramLink] 
     * @param {string | null} [whatsAppLink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApiInterface
     */
    sellersSellerShopsUpdate(slug: string, slug2: string, title: string, seller: number, logo?: File | null, description?: string | null, status?: SellersSellerShopsUpdateStatusEnum, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: AxiosRequestConfig): AxiosPromise<Shop>;

}

/**
 * SellersApi - object-oriented interface
 * @export
 * @class SellersApi
 * @extends {BaseAPI}
 */
export class SellersApi extends BaseAPI implements SellersApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersCustomerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersCustomerShopsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersCustomerShopsRead(slug: string, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersCustomerShopsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShopBranchCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopBranchesCreate(data: ShopBranchCreate, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopBranchesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopBranchesDelete(id: number, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopBranchesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopBranchesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopBranchesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {ShopBranch} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopBranchesPartialUpdate(id: number, data: ShopBranch, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopBranchesPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopBranchesRead(id: number, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopBranchesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {ShopBranch} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopBranchesUpdate(id: number, data: ShopBranch, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopBranchesUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {string} title 
     * @param {string | null} [description] 
     * @param {File | null} [logo] 
     * @param {string | null} [siteLink] 
     * @param {string | null} [instagramLink] 
     * @param {string | null} [whatsAppLink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopsPartialUpdate(slug: string, title: string, description?: string | null, logo?: File | null, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopsPartialUpdate(slug, title, description, logo, siteLink, instagramLink, whatsAppLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {string} slug2 
     * @param {string} title 
     * @param {number} seller 
     * @param {File | null} [logo] 
     * @param {string | null} [description] 
     * @param {SellersSellerShopsUpdateStatusEnum} [status] 
     * @param {string | null} [siteLink] 
     * @param {string | null} [instagramLink] 
     * @param {string | null} [whatsAppLink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    public sellersSellerShopsUpdate(slug: string, slug2: string, title: string, seller: number, logo?: File | null, description?: string | null, status?: SellersSellerShopsUpdateStatusEnum, siteLink?: string | null, instagramLink?: string | null, whatsAppLink?: string | null, options?: AxiosRequestConfig) {
        return SellersApiFp(this.configuration).sellersSellerShopsUpdate(slug, slug2, title, seller, logo, description, status, siteLink, instagramLink, whatsAppLink, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SellersSellerShopsUpdateStatusEnum = {
    Moderation: 'MODERATION',
    Active: 'ACTIVE'
} as const;
export type SellersSellerShopsUpdateStatusEnum = typeof SellersSellerShopsUpdateStatusEnum[keyof typeof SellersSellerShopsUpdateStatusEnum];


