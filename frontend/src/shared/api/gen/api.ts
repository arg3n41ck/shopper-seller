/* tslint:disable */
/* eslint-disable */
/**
 * Shopper API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountsUsersList200Response
 */
export interface AccountsUsersList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsUsersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsUsersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsUsersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof AccountsUsersList200Response
     */
    'results': Array<User>;
}
/**
 * 
 * @export
 * @interface BranchAddress
 */
export interface BranchAddress {
    /**
     * 
     * @type {number}
     * @memberof BranchAddress
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BranchAddress
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof BranchAddress
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface BranchAddressCreate
 */
export interface BranchAddressCreate {
    /**
     * 
     * @type {number}
     * @memberof BranchAddressCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BranchAddressCreate
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof BranchAddressCreate
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'image'?: string;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Category
     */
    'children': Array<Category>;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'user': number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'date_of_birth'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Customer
     */
    'preferences': Array<CustomerPreferencesEnum>;
}

export const CustomerPreferencesEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Baby: 'BABY'
} as const;

export type CustomerPreferencesEnum = typeof CustomerPreferencesEnum[keyof typeof CustomerPreferencesEnum];

/**
 * 
 * @export
 * @interface CustomerCreate
 */
export interface CustomerCreate {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreate
     */
    'date_of_birth'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerCreate
     */
    'preferences': Array<CustomerCreatePreferencesEnum>;
}

export const CustomerCreatePreferencesEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Baby: 'BABY'
} as const;

export type CustomerCreatePreferencesEnum = typeof CustomerCreatePreferencesEnum[keyof typeof CustomerCreatePreferencesEnum];

/**
 * 
 * @export
 * @interface CustomersCustomersList200Response
 */
export interface CustomersCustomersList200Response {
    /**
     * 
     * @type {number}
     * @memberof CustomersCustomersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CustomersCustomersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomersCustomersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Customer>}
     * @memberof CustomersCustomersList200Response
     */
    'results': Array<Customer>;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'sku'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'gender': ProductGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'for_kids': boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'price_from': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'discount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'discounted_price'?: string;
    /**
     * 
     * @type {Category}
     * @memberof Product
     */
    'category'?: Category;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'country'?: string | null;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Product
     */
    'tags'?: Array<Tag>;
    /**
     * 
     * @type {object}
     * @memberof Product
     */
    'specifications': object;
    /**
     * 
     * @type {Shop}
     * @memberof Product
     */
    'shop'?: Shop;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'publish_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'status'?: ProductStatusEnum;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Product
     */
    'variants'?: Array<ProductVariant>;
    /**
     * 
     * @type {Array<ProductReview>}
     * @memberof Product
     */
    'reviews'?: Array<ProductReview>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'rating'?: string;
}

export const ProductGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type ProductGenderEnum = typeof ProductGenderEnum[keyof typeof ProductGenderEnum];
export const ProductStatusEnum = {
    Draft: 'DRAFT',
    Active: 'ACTIVE',
    Archive: 'ARCHIVE'
} as const;

export type ProductStatusEnum = typeof ProductStatusEnum[keyof typeof ProductStatusEnum];

/**
 * 
 * @export
 * @interface ProductCreate
 */
export interface ProductCreate {
    /**
     * 
     * @type {number}
     * @memberof ProductCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'sku'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'recommendation': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'gender': ProductCreateGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreate
     */
    'for_kids': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'price_from': string;
    /**
     * 
     * @type {number}
     * @memberof ProductCreate
     */
    'discount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductCreate
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'country'?: string | null;
    /**
     * 
     * @type {Set<number>}
     * @memberof ProductCreate
     */
    'tags'?: Set<number>;
    /**
     * 
     * @type {object}
     * @memberof ProductCreate
     */
    'specifications': object;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'publish_date'?: string | null;
}

export const ProductCreateGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type ProductCreateGenderEnum = typeof ProductCreateGenderEnum[keyof typeof ProductCreateGenderEnum];

/**
 * 
 * @export
 * @interface ProductFavourite
 */
export interface ProductFavourite {
    /**
     * 
     * @type {number}
     * @memberof ProductFavourite
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductFavourite
     */
    'product': number;
}
/**
 * 
 * @export
 * @interface ProductReview
 */
export interface ProductReview {
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'product': number;
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'star': number;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'review': string;
    /**
     * 
     * @type {Customer}
     * @memberof ProductReview
     */
    'customer'?: Customer;
}
/**
 * 
 * @export
 * @interface ProductVariant
 */
export interface ProductVariant {
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    'product': number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof ProductVariant
     */
    'size_variants': object;
    /**
     * 
     * @type {Array<ProductVariantImage>}
     * @memberof ProductVariant
     */
    'images'?: Array<ProductVariantImage>;
}
/**
 * 
 * @export
 * @interface ProductVariantCreate
 */
export interface ProductVariantCreate {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantCreate
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantCreate
     */
    'product': number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantCreate
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof ProductVariantCreate
     */
    'size_variants': object;
}
/**
 * 
 * @export
 * @interface ProductVariantImage
 */
export interface ProductVariantImage {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantImage
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantImage
     */
    'variant': number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantImage
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface ProductsCustomerFavouritesList200Response
 */
export interface ProductsCustomerFavouritesList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductFavourite>}
     * @memberof ProductsCustomerFavouritesList200Response
     */
    'results': Array<ProductFavourite>;
}
/**
 * 
 * @export
 * @interface ProductsCustomerProductsList200Response
 */
export interface ProductsCustomerProductsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsCustomerProductsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerProductsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerProductsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductsCustomerProductsList200Response
     */
    'results': Array<Product>;
}
/**
 * 
 * @export
 * @interface ProductsCustomerReviewsList200Response
 */
export interface ProductsCustomerReviewsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductReview>}
     * @memberof ProductsCustomerReviewsList200Response
     */
    'results': Array<ProductReview>;
}
/**
 * 
 * @export
 * @interface ProductsSellerVariantsImagesList200Response
 */
export interface ProductsSellerVariantsImagesList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsSellerVariantsImagesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerVariantsImagesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerVariantsImagesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductVariantImage>}
     * @memberof ProductsSellerVariantsImagesList200Response
     */
    'results': Array<ProductVariantImage>;
}
/**
 * 
 * @export
 * @interface ProductsSellerVariantsList200Response
 */
export interface ProductsSellerVariantsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductsSellerVariantsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerVariantsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductsSellerVariantsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof ProductsSellerVariantsList200Response
     */
    'results': Array<ProductVariant>;
}
/**
 * 
 * @export
 * @interface ResetEmailConfirm
 */
export interface ResetEmailConfirm {
    /**
     * 
     * @type {string}
     * @memberof ResetEmailConfirm
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordConfirm
 */
export interface ResetPasswordConfirm {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordConfirm
     */
    're_password': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordSendMessage
 */
export interface ResetPasswordSendMessage {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordSendMessage
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ResetPhoneNumberConfirm
 */
export interface ResetPhoneNumberConfirm {
    /**
     * 
     * @type {string}
     * @memberof ResetPhoneNumberConfirm
     */
    'phone_number': string;
}
/**
 * 
 * @export
 * @interface SetPassword
 */
export interface SetPassword {
    /**
     * 
     * @type {string}
     * @memberof SetPassword
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SetPassword
     */
    're_password': string;
    /**
     * 
     * @type {string}
     * @memberof SetPassword
     */
    'current_password': string;
}
/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof Shop
     */
    'user': number;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'status'?: ShopStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'site_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'instagram_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'whats_app_link'?: string | null;
    /**
     * 
     * @type {Array<BranchAddress>}
     * @memberof Shop
     */
    'branches'?: Array<BranchAddress>;
}

export const ShopStatusEnum = {
    Moderation: 'MODERATION',
    Active: 'ACTIVE',
    Blocked: 'BLOCKED'
} as const;

export type ShopStatusEnum = typeof ShopStatusEnum[keyof typeof ShopStatusEnum];

/**
 * 
 * @export
 * @interface ShopCreate
 */
export interface ShopCreate {
    /**
     * 
     * @type {string}
     * @memberof ShopCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ShopCreate
     */
    'key': string;
}
/**
 * 
 * @export
 * @interface ShopUpdate
 */
export interface ShopUpdate {
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'site_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'instagram_link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUpdate
     */
    'whats_app_link'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopsCustomerShopsList200Response
 */
export interface ShopsCustomerShopsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ShopsCustomerShopsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ShopsCustomerShopsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopsCustomerShopsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Shop>}
     * @memberof ShopsCustomerShopsList200Response
     */
    'results': Array<Shop>;
}
/**
 * 
 * @export
 * @interface Specification
 */
export interface Specification {
    /**
     * 
     * @type {number}
     * @memberof Specification
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'refresh': string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface TokenVerify
 */
export interface TokenVerify {
    /**
     * 
     * @type {string}
     * @memberof TokenVerify
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'type': UserTypeEnum;
}

export const UserTypeEnum = {
    Seller: 'SELLER',
    Customer: 'CUSTOMER'
} as const;

export type UserTypeEnum = typeof UserTypeEnum[keyof typeof UserTypeEnum];

/**
 * 
 * @export
 * @interface UserCustomerCreate
 */
export interface UserCustomerCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'type': UserCustomerCreateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCustomerCreate
     */
    're_password': string;
    /**
     * 
     * @type {CustomerCreate}
     * @memberof UserCustomerCreate
     */
    'customer': CustomerCreate;
}

export const UserCustomerCreateTypeEnum = {
    Seller: 'SELLER',
    Customer: 'CUSTOMER'
} as const;

export type UserCustomerCreateTypeEnum = typeof UserCustomerCreateTypeEnum[keyof typeof UserCustomerCreateTypeEnum];

/**
 * 
 * @export
 * @interface UserSellerCreate
 */
export interface UserSellerCreate {
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'type': UserSellerCreateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserSellerCreate
     */
    're_password': string;
    /**
     * 
     * @type {ShopCreate}
     * @memberof UserSellerCreate
     */
    'shop': ShopCreate;
}

export const UserSellerCreateTypeEnum = {
    Seller: 'SELLER',
    Customer: 'CUSTOMER'
} as const;

export type UserSellerCreateTypeEnum = typeof UserSellerCreateTypeEnum[keyof typeof UserSellerCreateTypeEnum];


/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenCreate: async (data: TokenObtainPair, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsAuthTokenCreate', 'data', data)
            const localVarPath = `/accounts/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to logout user (remove user authentication token).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/auth/token/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenRefreshCreate: async (data: TokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsAuthTokenRefreshCreate', 'data', data)
            const localVarPath = `/accounts/auth/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenVerifyCreate: async (data: TokenVerify, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsAuthTokenVerifyCreate', 'data', data)
            const localVarPath = `/accounts/auth/token/verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreate: async (data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersCreate', 'data', data)
            const localVarPath = `/accounts/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCustomerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateCustomer: async (data: UserCustomerCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersCreateCustomer', 'data', data)
            const localVarPath = `/accounts/users/create_customer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSellerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateSeller: async (data: UserSellerCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersCreateSeller', 'data', data)
            const localVarPath = `/accounts/users/create_seller/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersDelete', 'id', id)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMePartialUpdate: async (data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersMePartialUpdate', 'data', data)
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeRead: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeUpdate: async (data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersMeUpdate', 'data', data)
            const localVarPath = `/accounts/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersPartialUpdate: async (id: number, data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersPartialUpdate', 'data', data)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersRead', 'id', id)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetEmailConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetEmailConfirm: async (data: ResetEmailConfirm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetEmailConfirm', 'data', data)
            const localVarPath = `/accounts/users/reset_email_confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordSendMessage} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPassword: async (data: ResetPasswordSendMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetPassword', 'data', data)
            const localVarPath = `/accounts/users/reset_password/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordConfirm: async (data: ResetPasswordConfirm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetPasswordConfirm', 'data', data)
            const localVarPath = `/accounts/users/reset_password_confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPhoneNumberConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPhoneNumberConfirm: async (data: ResetPhoneNumberConfirm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetPhoneNumberConfirm', 'data', data)
            const localVarPath = `/accounts/users/reset_phone_number_confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetUsername: async (data: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersResetUsername', 'data', data)
            const localVarPath = `/accounts/users/reset_username/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetPassword} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersSetPassword: async (data: SetPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersSetPassword', 'data', data)
            const localVarPath = `/accounts/users/set_password/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersUpdate: async (id: number, data: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsUsersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsUsersUpdate', 'data', data)
            const localVarPath = `/accounts/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPair>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to logout user (remove user authentication token).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenRefreshCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAuthTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVerify>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAuthTokenVerifyCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersCreate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserCustomerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersCreateCustomer(data: UserCustomerCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCustomerCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersCreateCustomer(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserSellerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersCreateSeller(data: UserSellerCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSellerCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersCreateSeller(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsUsersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMeDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMeDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMePartialUpdate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMePartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMeRead(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsUsersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMeRead(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersMeUpdate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersMeUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersPartialUpdate(id: number, data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetEmailConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetEmailConfirm(data: ResetEmailConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetEmailConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetEmailConfirm(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordSendMessage} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetPassword(data: ResetPasswordSendMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordSendMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetPassword(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetPasswordConfirm(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPhoneNumberConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetPhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPhoneNumberConfirm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetPhoneNumberConfirm(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersResetUsername(data: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersResetUsername(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SetPassword} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersSetPassword(data: SetPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPassword>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersSetPassword(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsersUpdate(id: number, data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenCreate(data: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPair> {
            return localVarFp.accountsAuthTokenCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to logout user (remove user authentication token).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenLogoutCreate(options?: any): AxiosPromise<void> {
            return localVarFp.accountsAuthTokenLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: any): AxiosPromise<TokenRefresh> {
            return localVarFp.accountsAuthTokenRefreshCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAuthTokenVerifyCreate(data: TokenVerify, options?: any): AxiosPromise<TokenVerify> {
            return localVarFp.accountsAuthTokenVerifyCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreate(data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCustomerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateCustomer(data: UserCustomerCreate, options?: any): AxiosPromise<UserCustomerCreate> {
            return localVarFp.accountsUsersCreateCustomer(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserSellerCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersCreateSeller(data: UserSellerCreate, options?: any): AxiosPromise<UserSellerCreate> {
            return localVarFp.accountsUsersCreateSeller(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.accountsUsersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersList(limit?: number, offset?: number, options?: any): AxiosPromise<AccountsUsersList200Response> {
            return localVarFp.accountsUsersList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeDelete(options?: any): AxiosPromise<void> {
            return localVarFp.accountsUsersMeDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMePartialUpdate(data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersMePartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeRead(limit?: number, offset?: number, options?: any): AxiosPromise<AccountsUsersList200Response> {
            return localVarFp.accountsUsersMeRead(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersMeUpdate(data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersMeUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersPartialUpdate(id: number, data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersRead(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetEmailConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetEmailConfirm(data: ResetEmailConfirm, options?: any): AxiosPromise<ResetEmailConfirm> {
            return localVarFp.accountsUsersResetEmailConfirm(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordSendMessage} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPassword(data: ResetPasswordSendMessage, options?: any): AxiosPromise<ResetPasswordSendMessage> {
            return localVarFp.accountsUsersResetPassword(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: any): AxiosPromise<ResetPasswordConfirm> {
            return localVarFp.accountsUsersResetPasswordConfirm(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPhoneNumberConfirm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetPhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: any): AxiosPromise<ResetPhoneNumberConfirm> {
            return localVarFp.accountsUsersResetPhoneNumberConfirm(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersResetUsername(data: object, options?: any): AxiosPromise<object> {
            return localVarFp.accountsUsersResetUsername(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SetPassword} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersSetPassword(data: SetPassword, options?: any): AxiosPromise<SetPassword> {
            return localVarFp.accountsUsersSetPassword(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this User.
         * @param {User} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsersUpdate(id: number, data: User, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUsersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - interface
 * @export
 * @interface AccountsApi
 */
export interface AccountsApiInterface {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig): AxiosPromise<TokenObtainPair>;

    /**
     * Use this endpoint to logout user (remove user authentication token).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenLogoutCreate(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): AxiosPromise<TokenRefresh>;

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsAuthTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): AxiosPromise<TokenVerify>;

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersCreate(data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {UserCustomerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersCreateCustomer(data: UserCustomerCreate, options?: AxiosRequestConfig): AxiosPromise<UserCustomerCreate>;

    /**
     * 
     * @param {UserSellerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersCreateSeller(data: UserSellerCreate, options?: AxiosRequestConfig): AxiosPromise<UserSellerCreate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<AccountsUsersList200Response>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMeDelete(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMePartialUpdate(data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMeRead(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<AccountsUsersList200Response>;

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersMeUpdate(data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersPartialUpdate(id: number, data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersRead(id: number, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @param {ResetEmailConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetEmailConfirm(data: ResetEmailConfirm, options?: AxiosRequestConfig): AxiosPromise<ResetEmailConfirm>;

    /**
     * 
     * @param {ResetPasswordSendMessage} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetPassword(data: ResetPasswordSendMessage, options?: AxiosRequestConfig): AxiosPromise<ResetPasswordSendMessage>;

    /**
     * 
     * @param {ResetPasswordConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: AxiosRequestConfig): AxiosPromise<ResetPasswordConfirm>;

    /**
     * 
     * @param {ResetPhoneNumberConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetPhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: AxiosRequestConfig): AxiosPromise<ResetPhoneNumberConfirm>;

    /**
     * 
     * @param {object} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersResetUsername(data: object, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @param {SetPassword} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersSetPassword(data: SetPassword, options?: AxiosRequestConfig): AxiosPromise<SetPassword>;

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUsersUpdate(id: number, data: User, options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI implements AccountsApiInterface {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to logout user (remove user authentication token).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenLogoutCreate(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenRefreshCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAuthTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAuthTokenVerifyCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersCreate(data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCustomerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersCreateCustomer(data: UserCustomerCreate, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersCreateCustomer(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserSellerCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersCreateSeller(data: UserSellerCreate, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersCreateSeller(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersDelete(id: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMeDelete(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMeDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMePartialUpdate(data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMePartialUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMeRead(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMeRead(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersMeUpdate(data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersMeUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersPartialUpdate(id: number, data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersRead(id: number, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetEmailConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetEmailConfirm(data: ResetEmailConfirm, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetEmailConfirm(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordSendMessage} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetPassword(data: ResetPasswordSendMessage, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetPassword(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetPasswordConfirm(data: ResetPasswordConfirm, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetPasswordConfirm(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPhoneNumberConfirm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetPhoneNumberConfirm(data: ResetPhoneNumberConfirm, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetPhoneNumberConfirm(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersResetUsername(data: object, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersResetUsername(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SetPassword} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersSetPassword(data: SetPassword, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersSetPassword(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this User.
     * @param {User} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUsersUpdate(id: number, data: User, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUsersUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersDelete', 'id', id)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersList: async (user?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers/customers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersPartialUpdate: async (id: number, data: Customer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customersCustomersPartialUpdate', 'data', data)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersRead', 'id', id)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersUpdate: async (id: number, data: Customer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customersCustomersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customersCustomersUpdate', 'data', data)
            const localVarPath = `/customers/customers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersCustomersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersList(user, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersPartialUpdate(id: number, data: Customer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomersUpdate(id: number, data: Customer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.customersCustomersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersList(user?: string, limit?: number, offset?: number, options?: any): AxiosPromise<CustomersCustomersList200Response> {
            return localVarFp.customersCustomersList(user, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersPartialUpdate(id: number, data: Customer, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersRead(id: number, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Customer.
         * @param {Customer} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomersUpdate(id: number, data: Customer, options?: any): AxiosPromise<Customer> {
            return localVarFp.customersCustomersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - interface
 * @export
 * @interface CustomersApi
 */
export interface CustomersApiInterface {
    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [user] user
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CustomersCustomersList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersPartialUpdate(id: number, data: Customer, options?: AxiosRequestConfig): AxiosPromise<Customer>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Customer>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiInterface
     */
    customersCustomersUpdate(id: number, data: Customer, options?: AxiosRequestConfig): AxiosPromise<Customer>;

}

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI implements CustomersApiInterface {
    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersDelete(id: number, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [user] user
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersList(user, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersPartialUpdate(id: number, data: Customer, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersRead(id: number, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Customer.
     * @param {Customer} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customersCustomersUpdate(id: number, data: Customer, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomersUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsCategoriesRead', 'slug', slug)
            const localVarPath = `/products/categories/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesCreate: async (data: ProductFavourite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerFavouritesCreate', 'data', data)
            const localVarPath = `/products/customer-favourites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerFavouritesDelete', 'id', id)
            const localVarPath = `/products/customer-favourites/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/customer-favourites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesPartialUpdate: async (id: number, data: ProductFavourite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerFavouritesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerFavouritesPartialUpdate', 'data', data)
            const localVarPath = `/products/customer-favourites/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerFavouritesRead', 'id', id)
            const localVarPath = `/products/customer-favourites/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesUpdate: async (id: number, data: ProductFavourite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerFavouritesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerFavouritesUpdate', 'data', data)
            const localVarPath = `/products/customer-favourites/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [shop] shop
         * @param {string} [category] category
         * @param {string} [gender] gender
         * @param {string} [status] status
         * @param {string} [search] A search term.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerProductsList: async (shop?: string, category?: string, gender?: string, status?: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/customer-products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (shop !== undefined) {
                localVarQueryParameter['shop'] = shop;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerProductsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsCustomerProductsRead', 'slug', slug)
            const localVarPath = `/products/customer-products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsCreate: async (data: ProductReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerReviewsCreate', 'data', data)
            const localVarPath = `/products/customer-reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerReviewsDelete', 'id', id)
            const localVarPath = `/products/customer-reviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/customer-reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsPartialUpdate: async (id: number, data: ProductReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerReviewsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerReviewsPartialUpdate', 'data', data)
            const localVarPath = `/products/customer-reviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerReviewsRead', 'id', id)
            const localVarPath = `/products/customer-reviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsUpdate: async (id: number, data: ProductReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsCustomerReviewsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsCustomerReviewsUpdate', 'data', data)
            const localVarPath = `/products/customer-reviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsCreate: async (data: ProductCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductsCreate', 'data', data)
            const localVarPath = `/products/seller-products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsDelete: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsDelete', 'slug', slug)
            const localVarPath = `/products/seller-products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [shop] shop
         * @param {string} [category] category
         * @param {string} [gender] gender
         * @param {string} [status] status
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsList: async (shop?: string, category?: string, gender?: string, status?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/seller-products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (shop !== undefined) {
                localVarQueryParameter['shop'] = shop;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsPartialUpdate: async (slug: string, data: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsPartialUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductsPartialUpdate', 'data', data)
            const localVarPath = `/products/seller-products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsRead', 'slug', slug)
            const localVarPath = `/products/seller-products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsUpdate: async (slug: string, data: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerProductsUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerProductsUpdate', 'data', data)
            const localVarPath = `/products/seller-products/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductVariantCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsCreate: async (data: ProductVariantCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerVariantsCreate', 'data', data)
            const localVarPath = `/products/seller-variants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsDelete: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerVariantsDelete', 'slug', slug)
            const localVarPath = `/products/seller-variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesCreate: async (variant: number, image: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variant' is not null or undefined
            assertParamExists('productsSellerVariantsImagesCreate', 'variant', variant)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('productsSellerVariantsImagesCreate', 'image', image)
            const localVarPath = `/products/seller-variants-images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (variant !== undefined) { 
                localVarFormParams.append('variant', variant as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantsImagesDelete', 'id', id)
            const localVarPath = `/products/seller-variants-images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/seller-variants-images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesPartialUpdate: async (id: number, variant: number, image: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantsImagesPartialUpdate', 'id', id)
            // verify required parameter 'variant' is not null or undefined
            assertParamExists('productsSellerVariantsImagesPartialUpdate', 'variant', variant)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('productsSellerVariantsImagesPartialUpdate', 'image', image)
            const localVarPath = `/products/seller-variants-images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (variant !== undefined) { 
                localVarFormParams.append('variant', variant as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantsImagesRead', 'id', id)
            const localVarPath = `/products/seller-variants-images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesUpdate: async (id: number, variant: number, image: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsSellerVariantsImagesUpdate', 'id', id)
            // verify required parameter 'variant' is not null or undefined
            assertParamExists('productsSellerVariantsImagesUpdate', 'variant', variant)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('productsSellerVariantsImagesUpdate', 'image', image)
            const localVarPath = `/products/seller-variants-images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (variant !== undefined) { 
                localVarFormParams.append('variant', variant as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/seller-variants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsPartialUpdate: async (slug: string, data: ProductVariant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerVariantsPartialUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerVariantsPartialUpdate', 'data', data)
            const localVarPath = `/products/seller-variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerVariantsRead', 'slug', slug)
            const localVarPath = `/products/seller-variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsUpdate: async (slug: string, data: ProductVariant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSellerVariantsUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsSellerVariantsUpdate', 'data', data)
            const localVarPath = `/products/seller-variants/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSpecificationsList: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/specifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSpecificationsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsSpecificationsRead', 'slug', slug)
            const localVarPath = `/products/specifications/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsCreate: async (data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTagsCreate', 'data', data)
            const localVarPath = `/products/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsDelete: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsTagsDelete', 'slug', slug)
            const localVarPath = `/products/tags/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsList: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsPartialUpdate: async (slug: string, data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsTagsPartialUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTagsPartialUpdate', 'data', data)
            const localVarPath = `/products/tags/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsTagsRead', 'slug', slug)
            const localVarPath = `/products/tags/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsUpdate: async (slug: string, data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('productsTagsUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('productsTagsUpdate', 'data', data)
            const localVarPath = `/products/tags/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCategoriesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCategoriesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCategoriesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCategoriesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesCreate(data: ProductFavourite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFavourite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCustomerFavouritesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesPartialUpdate(id: number, data: ProductFavourite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFavourite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFavourite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerFavouritesUpdate(id: number, data: ProductFavourite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFavourite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerFavouritesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [shop] shop
         * @param {string} [category] category
         * @param {string} [gender] gender
         * @param {string} [status] status
         * @param {string} [search] A search term.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerProductsList(shop?: string, category?: string, gender?: string, status?: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCustomerProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerProductsList(shop, category, gender, status, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerProductsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerProductsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsCreate(data: ProductReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCustomerReviewsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsPartialUpdate(id: number, data: ProductReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsCustomerReviewsUpdate(id: number, data: ProductReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsCustomerReviewsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsCreate(data: ProductCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsDelete(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsDelete(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [shop] shop
         * @param {string} [category] category
         * @param {string} [gender] gender
         * @param {string} [status] status
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsList(shop?: string, category?: string, gender?: string, status?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsCustomerProductsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsList(shop, category, gender, status, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsPartialUpdate(slug: string, data: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsPartialUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerProductsUpdate(slug: string, data: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerProductsUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductVariantCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsCreate(data: ProductVariantCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsDelete(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsDelete(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsImagesCreate(variant: number, image: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsImagesCreate(variant, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsImagesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsImagesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsImagesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsSellerVariantsImagesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsImagesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsImagesPartialUpdate(id: number, variant: number, image: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsImagesPartialUpdate(id, variant, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsImagesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsImagesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsImagesUpdate(id: number, variant: number, image: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsImagesUpdate(id, variant, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsSellerVariantsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsPartialUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsPartialUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSellerVariantsUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSellerVariantsUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSpecificationsList(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Specification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSpecificationsList(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsSpecificationsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsSpecificationsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsCreate(data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsDelete(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsDelete(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsList(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsList(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsPartialUpdate(slug: string, data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsPartialUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsTagsUpdate(slug: string, data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsTagsUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesList(options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.productsCategoriesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCategoriesRead(slug: string, options?: any): AxiosPromise<Category> {
            return localVarFp.productsCategoriesRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesCreate(data: ProductFavourite, options?: any): AxiosPromise<ProductFavourite> {
            return localVarFp.productsCustomerFavouritesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productsCustomerFavouritesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsCustomerFavouritesList200Response> {
            return localVarFp.productsCustomerFavouritesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesPartialUpdate(id: number, data: ProductFavourite, options?: any): AxiosPromise<ProductFavourite> {
            return localVarFp.productsCustomerFavouritesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesRead(id: number, options?: any): AxiosPromise<ProductFavourite> {
            return localVarFp.productsCustomerFavouritesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product favourite.
         * @param {ProductFavourite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerFavouritesUpdate(id: number, data: ProductFavourite, options?: any): AxiosPromise<ProductFavourite> {
            return localVarFp.productsCustomerFavouritesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [shop] shop
         * @param {string} [category] category
         * @param {string} [gender] gender
         * @param {string} [status] status
         * @param {string} [search] A search term.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerProductsList(shop?: string, category?: string, gender?: string, status?: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProductsCustomerProductsList200Response> {
            return localVarFp.productsCustomerProductsList(shop, category, gender, status, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerProductsRead(slug: string, options?: any): AxiosPromise<Product> {
            return localVarFp.productsCustomerProductsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsCreate(data: ProductReview, options?: any): AxiosPromise<ProductReview> {
            return localVarFp.productsCustomerReviewsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productsCustomerReviewsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsCustomerReviewsList200Response> {
            return localVarFp.productsCustomerReviewsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsPartialUpdate(id: number, data: ProductReview, options?: any): AxiosPromise<ProductReview> {
            return localVarFp.productsCustomerReviewsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsRead(id: number, options?: any): AxiosPromise<ProductReview> {
            return localVarFp.productsCustomerReviewsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product review.
         * @param {ProductReview} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsCustomerReviewsUpdate(id: number, data: ProductReview, options?: any): AxiosPromise<ProductReview> {
            return localVarFp.productsCustomerReviewsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsCreate(data: ProductCreate, options?: any): AxiosPromise<ProductCreate> {
            return localVarFp.productsSellerProductsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsDelete(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.productsSellerProductsDelete(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [shop] shop
         * @param {string} [category] category
         * @param {string} [gender] gender
         * @param {string} [status] status
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsList(shop?: string, category?: string, gender?: string, status?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProductsCustomerProductsList200Response> {
            return localVarFp.productsSellerProductsList(shop, category, gender, status, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsPartialUpdate(slug: string, data: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.productsSellerProductsPartialUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsRead(slug: string, options?: any): AxiosPromise<Product> {
            return localVarFp.productsSellerProductsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {Product} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerProductsUpdate(slug: string, data: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.productsSellerProductsUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductVariantCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsCreate(data: ProductVariantCreate, options?: any): AxiosPromise<ProductVariantCreate> {
            return localVarFp.productsSellerVariantsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsDelete(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.productsSellerVariantsDelete(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesCreate(variant: number, image: File, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantsImagesCreate(variant, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.productsSellerVariantsImagesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsSellerVariantsImagesList200Response> {
            return localVarFp.productsSellerVariantsImagesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesPartialUpdate(id: number, variant: number, image: File, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantsImagesPartialUpdate(id, variant, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesRead(id: number, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantsImagesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Product image.
         * @param {number} variant 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsImagesUpdate(id: number, variant: number, image: File, options?: any): AxiosPromise<ProductVariantImage> {
            return localVarFp.productsSellerVariantsImagesUpdate(id, variant, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsList(limit?: number, offset?: number, options?: any): AxiosPromise<ProductsSellerVariantsList200Response> {
            return localVarFp.productsSellerVariantsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsPartialUpdate(slug: string, data: ProductVariant, options?: any): AxiosPromise<ProductVariant> {
            return localVarFp.productsSellerVariantsPartialUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsRead(slug: string, options?: any): AxiosPromise<ProductVariant> {
            return localVarFp.productsSellerVariantsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {ProductVariant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSellerVariantsUpdate(slug: string, data: ProductVariant, options?: any): AxiosPromise<ProductVariant> {
            return localVarFp.productsSellerVariantsUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSpecificationsList(search?: string, options?: any): AxiosPromise<Array<Specification>> {
            return localVarFp.productsSpecificationsList(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsSpecificationsRead(slug: string, options?: any): AxiosPromise<Specification> {
            return localVarFp.productsSpecificationsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsCreate(data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.productsTagsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsDelete(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.productsTagsDelete(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsList(search?: string, options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.productsTagsList(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsPartialUpdate(slug: string, data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.productsTagsPartialUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsRead(slug: string, options?: any): AxiosPromise<Tag> {
            return localVarFp.productsTagsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsTagsUpdate(slug: string, data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.productsTagsUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - interface
 * @export
 * @interface ProductsApi
 */
export interface ProductsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCategoriesList(options?: AxiosRequestConfig): AxiosPromise<Array<Category>>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCategoriesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Category>;

    /**
     * 
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesCreate(data: ProductFavourite, options?: AxiosRequestConfig): AxiosPromise<ProductFavourite>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsCustomerFavouritesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesPartialUpdate(id: number, data: ProductFavourite, options?: AxiosRequestConfig): AxiosPromise<ProductFavourite>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<ProductFavourite>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerFavouritesUpdate(id: number, data: ProductFavourite, options?: AxiosRequestConfig): AxiosPromise<ProductFavourite>;

    /**
     * 
     * @param {string} [shop] shop
     * @param {string} [category] category
     * @param {string} [gender] gender
     * @param {string} [status] status
     * @param {string} [search] A search term.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerProductsList(shop?: string, category?: string, gender?: string, status?: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsCustomerProductsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerProductsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {ProductReview} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsCreate(data: ProductReview, options?: AxiosRequestConfig): AxiosPromise<ProductReview>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsCustomerReviewsList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {ProductReview} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsPartialUpdate(id: number, data: ProductReview, options?: AxiosRequestConfig): AxiosPromise<ProductReview>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsRead(id: number, options?: AxiosRequestConfig): AxiosPromise<ProductReview>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {ProductReview} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsCustomerReviewsUpdate(id: number, data: ProductReview, options?: AxiosRequestConfig): AxiosPromise<ProductReview>;

    /**
     * 
     * @param {ProductCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsCreate(data: ProductCreate, options?: AxiosRequestConfig): AxiosPromise<ProductCreate>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsDelete(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [shop] shop
     * @param {string} [category] category
     * @param {string} [gender] gender
     * @param {string} [status] status
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsList(shop?: string, category?: string, gender?: string, status?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsCustomerProductsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsPartialUpdate(slug: string, data: Product, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {string} slug 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerProductsUpdate(slug: string, data: Product, options?: AxiosRequestConfig): AxiosPromise<Product>;

    /**
     * 
     * @param {ProductVariantCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsCreate(data: ProductVariantCreate, options?: AxiosRequestConfig): AxiosPromise<ProductVariantCreate>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsDelete(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} variant 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsImagesCreate(variant: number, image: File, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsImagesDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsImagesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsSellerVariantsImagesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {number} variant 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsImagesPartialUpdate(id: number, variant: number, image: File, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsImagesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {number} variant 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsImagesUpdate(id: number, variant: number, image: File, options?: AxiosRequestConfig): AxiosPromise<ProductVariantImage>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ProductsSellerVariantsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsPartialUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): AxiosPromise<ProductVariant>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<ProductVariant>;

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSellerVariantsUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig): AxiosPromise<ProductVariant>;

    /**
     * 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSpecificationsList(search?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Specification>>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsSpecificationsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Specification>;

    /**
     * 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsCreate(data: Tag, options?: AxiosRequestConfig): AxiosPromise<Tag>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsDelete(slug: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsList(search?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Tag>>;

    /**
     * 
     * @param {string} slug 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsPartialUpdate(slug: string, data: Tag, options?: AxiosRequestConfig): AxiosPromise<Tag>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Tag>;

    /**
     * 
     * @param {string} slug 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    productsTagsUpdate(slug: string, data: Tag, options?: AxiosRequestConfig): AxiosPromise<Tag>;

}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI implements ProductsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCategoriesList(options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCategoriesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCategoriesRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCategoriesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesCreate(data: ProductFavourite, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesPartialUpdate(id: number, data: ProductFavourite, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesRead(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product favourite.
     * @param {ProductFavourite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerFavouritesUpdate(id: number, data: ProductFavourite, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerFavouritesUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [shop] shop
     * @param {string} [category] category
     * @param {string} [gender] gender
     * @param {string} [status] status
     * @param {string} [search] A search term.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerProductsList(shop?: string, category?: string, gender?: string, status?: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerProductsList(shop, category, gender, status, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerProductsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerProductsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductReview} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsCreate(data: ProductReview, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {ProductReview} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsPartialUpdate(id: number, data: ProductReview, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsRead(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product review.
     * @param {ProductReview} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsCustomerReviewsUpdate(id: number, data: ProductReview, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsCustomerReviewsUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsCreate(data: ProductCreate, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsDelete(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsDelete(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [shop] shop
     * @param {string} [category] category
     * @param {string} [gender] gender
     * @param {string} [status] status
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsList(shop?: string, category?: string, gender?: string, status?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsList(shop, category, gender, status, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsPartialUpdate(slug: string, data: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsPartialUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {Product} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerProductsUpdate(slug: string, data: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerProductsUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductVariantCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsCreate(data: ProductVariantCreate, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsDelete(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsDelete(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} variant 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsImagesCreate(variant: number, image: File, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsImagesCreate(variant, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsImagesDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsImagesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsImagesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsImagesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {number} variant 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsImagesPartialUpdate(id: number, variant: number, image: File, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsImagesPartialUpdate(id, variant, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsImagesRead(id: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsImagesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Product image.
     * @param {number} variant 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsImagesUpdate(id: number, variant: number, image: File, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsImagesUpdate(id, variant, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsPartialUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsPartialUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {ProductVariant} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSellerVariantsUpdate(slug: string, data: ProductVariant, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSellerVariantsUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSpecificationsList(search?: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSpecificationsList(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsSpecificationsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsSpecificationsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsCreate(data: Tag, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsDelete(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsDelete(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsList(search?: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsList(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsPartialUpdate(slug: string, data: Tag, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsPartialUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsRead(slug: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {Tag} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsTagsUpdate(slug: string, data: Tag, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsTagsUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShopsApi - axios parameter creator
 * @export
 */
export const ShopsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsCustomerShopsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shops/customer/shops/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsCustomerShopsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('shopsCustomerShopsRead', 'slug', slug)
            const localVarPath = `/shops/customer/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BranchAddressCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesCreate: async (data: BranchAddressCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('shopsSellerBranchesCreate', 'data', data)
            const localVarPath = `/shops/seller/branches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopsSellerBranchesDelete', 'id', id)
            const localVarPath = `/shops/seller/branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {BranchAddress} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesPartialUpdate: async (id: number, data: BranchAddress, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopsSellerBranchesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('shopsSellerBranchesPartialUpdate', 'data', data)
            const localVarPath = `/shops/seller/branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {BranchAddress} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesUpdate: async (id: number, data: BranchAddress, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopsSellerBranchesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('shopsSellerBranchesUpdate', 'data', data)
            const localVarPath = `/shops/seller/branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsList: async (user?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shops/seller/shops/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {ShopUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsPartialUpdate: async (slug: string, data: ShopUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('shopsSellerShopsPartialUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('shopsSellerShopsPartialUpdate', 'data', data)
            const localVarPath = `/shops/seller/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('shopsSellerShopsRead', 'slug', slug)
            const localVarPath = `/shops/seller/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {Shop} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsUpdate: async (slug: string, data: Shop, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('shopsSellerShopsUpdate', 'slug', slug)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('shopsSellerShopsUpdate', 'data', data)
            const localVarPath = `/shops/seller/shops/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopsApi - functional programming interface
 * @export
 */
export const ShopsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsCustomerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopsCustomerShopsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsCustomerShopsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsCustomerShopsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsCustomerShopsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BranchAddressCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerBranchesCreate(data: BranchAddressCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchAddressCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerBranchesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerBranchesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerBranchesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {BranchAddress} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerBranchesPartialUpdate(id: number, data: BranchAddress, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerBranchesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {BranchAddress} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerBranchesUpdate(id: number, data: BranchAddress, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerBranchesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerShopsList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopsCustomerShopsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerShopsList(user, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {ShopUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerShopsPartialUpdate(slug: string, data: ShopUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerShopsPartialUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerShopsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerShopsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {Shop} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopsSellerShopsUpdate(slug: string, data: Shop, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopsSellerShopsUpdate(slug, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopsApi - factory interface
 * @export
 */
export const ShopsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsCustomerShopsList(limit?: number, offset?: number, options?: any): AxiosPromise<ShopsCustomerShopsList200Response> {
            return localVarFp.shopsCustomerShopsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsCustomerShopsRead(slug: string, options?: any): AxiosPromise<Shop> {
            return localVarFp.shopsCustomerShopsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BranchAddressCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesCreate(data: BranchAddressCreate, options?: any): AxiosPromise<BranchAddressCreate> {
            return localVarFp.shopsSellerBranchesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.shopsSellerBranchesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {BranchAddress} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesPartialUpdate(id: number, data: BranchAddress, options?: any): AxiosPromise<BranchAddress> {
            return localVarFp.shopsSellerBranchesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch address.
         * @param {BranchAddress} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerBranchesUpdate(id: number, data: BranchAddress, options?: any): AxiosPromise<BranchAddress> {
            return localVarFp.shopsSellerBranchesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [user] user
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsList(user?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ShopsCustomerShopsList200Response> {
            return localVarFp.shopsSellerShopsList(user, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {ShopUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsPartialUpdate(slug: string, data: ShopUpdate, options?: any): AxiosPromise<ShopUpdate> {
            return localVarFp.shopsSellerShopsPartialUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsRead(slug: string, options?: any): AxiosPromise<Shop> {
            return localVarFp.shopsSellerShopsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {Shop} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopsSellerShopsUpdate(slug: string, data: Shop, options?: any): AxiosPromise<Shop> {
            return localVarFp.shopsSellerShopsUpdate(slug, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopsApi - interface
 * @export
 * @interface ShopsApi
 */
export interface ShopsApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsCustomerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ShopsCustomerShopsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsCustomerShopsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Shop>;

    /**
     * 
     * @param {BranchAddressCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerBranchesCreate(data: BranchAddressCreate, options?: AxiosRequestConfig): AxiosPromise<BranchAddressCreate>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerBranchesDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {BranchAddress} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerBranchesPartialUpdate(id: number, data: BranchAddress, options?: AxiosRequestConfig): AxiosPromise<BranchAddress>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {BranchAddress} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerBranchesUpdate(id: number, data: BranchAddress, options?: AxiosRequestConfig): AxiosPromise<BranchAddress>;

    /**
     * 
     * @param {string} [user] user
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerShopsList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ShopsCustomerShopsList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {ShopUpdate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerShopsPartialUpdate(slug: string, data: ShopUpdate, options?: AxiosRequestConfig): AxiosPromise<ShopUpdate>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerShopsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Shop>;

    /**
     * 
     * @param {string} slug 
     * @param {Shop} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApiInterface
     */
    shopsSellerShopsUpdate(slug: string, data: Shop, options?: AxiosRequestConfig): AxiosPromise<Shop>;

}

/**
 * ShopsApi - object-oriented interface
 * @export
 * @class ShopsApi
 * @extends {BaseAPI}
 */
export class ShopsApi extends BaseAPI implements ShopsApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsCustomerShopsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsCustomerShopsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsCustomerShopsRead(slug: string, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsCustomerShopsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BranchAddressCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerBranchesCreate(data: BranchAddressCreate, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerBranchesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerBranchesDelete(id: number, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerBranchesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {BranchAddress} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerBranchesPartialUpdate(id: number, data: BranchAddress, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerBranchesPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch address.
     * @param {BranchAddress} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerBranchesUpdate(id: number, data: BranchAddress, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerBranchesUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [user] user
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerShopsList(user?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerShopsList(user, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {ShopUpdate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerShopsPartialUpdate(slug: string, data: ShopUpdate, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerShopsPartialUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerShopsRead(slug: string, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerShopsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {Shop} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public shopsSellerShopsUpdate(slug: string, data: Shop, options?: AxiosRequestConfig) {
        return ShopsApiFp(this.configuration).shopsSellerShopsUpdate(slug, data, options).then((request) => request(this.axios, this.basePath));
    }
}


